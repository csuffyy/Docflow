@model List<RapidDoc.Models.ViewModels.DocumentBaseProtocolFolderView>
@using RapidDoc.Extensions;
@{
    Layout = null;

}

@BuildTree(Model, null)

@helper BuildTree(IEnumerable<RapidDoc.Models.ViewModels.DocumentBaseProtocolFolderView> nodes, Guid? parentId)
{
    if (nodes.Any(n => n.ProtocolFoldersParentId == parentId)) 
    {
        foreach (var item in nodes.Where(n => n.ProtocolFoldersParentId == parentId))
        {
            <div class="panel panel-default">
                <div class="panel-heading" role="tab" id="heading@item.ProtocolFoldersId">
                    <p class="panel-title"><a href="#collapseArea_@item.ProtocolFoldersId" data-toggle="collapse" data-target="#collapseArea_@item.ProtocolFoldersId" aria-expanded="false" aria-controls="collapseArea_@item.ProtocolFoldersId"><strong>@item.ProtocolFolderName </strong></a></p>
                </div>
                <div class="collapse" id="collapseArea_@item.ProtocolFoldersId">
                    <div class="panel-body">
                        @if (item.documentBaseList.Count() > 0)
                        {
                            foreach (var docBase in item.documentBaseList.OrderBy(x => x.CreatedDate))
                            {
                                <p>
                                    <a href="@Url.Action("ShowDocument", "Document", new { id = docBase.Id, isAfterView = true })" target="_blank"><ins>@docBase.DocumentNum</ins> - @*@docBase.OrderNumber /*@ @docBase.DocumentTitle (@docBase.CreatedDate) => @Html.EnumToDescription(docBase.DocumentState)</a>
                                </p>
                            }
                        }
                        @BuildTree(Model, item.ProtocolFoldersId)
                    </div>
                </div>
            </div>
        }
    }
}

<div class="panel-group" id="accordion" role="tablist" aria-multiselectable="true">

</div>