@model RapidDoc.Models.ViewModels.ProcessView
@using RapidDoc.Extensions;

@{
    ViewBag.Title = UIElementRes.UIElement.Edit;
}

<h2>@UIElementRes.UIElement.Edit</h2>

@using (Html.BeginForm("Edit", "Process", new { documentFileId = Model.Id }, FormMethod.Post, new { id = "ajaxUploadForm", enctype = "multipart/form-data" }))
{
    @Html.ValidationSummary(true)

    <fieldset>
        <legend></legend>
        <div class="editor-label">
            @Html.LabelForRequired(model => model.ProcessName)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(model => model.ProcessName, new { @class = "form-control", @size = 70, @maxlength = 70, placeholder = "IT Incident", @autofocus = "required", @x_webkit_speech = "" })
            @Html.ValidationMessageFor(model => model.ProcessName)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.Description)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(model => model.Description, new { @class = "form-control", @size = 256, @maxlength = 256, placeholder = "Incident Management", @x_webkit_speech = "" })
            @Html.ValidationMessageFor(model => model.Description)
        </div>

        <div class="editor-label">
            @Html.LabelForRequired(model => model.GroupProcessName)
        </div>
        <div class="editor-field">
            @Html.DropDownList("GroupProcessTableId", (IEnumerable<SelectListItem>)ViewBag.GroupProcessList, new { @class = "selectpicker", @data_live_search = "true", @data_size = "10" })
            @Html.ValidationMessageFor(model => model.GroupProcessTableId)
        </div>

        <div class="editor-label">
            @Html.LabelForRequired(model => model.WorkScheduleName)
        </div>
        <div class="editor-field">
            @Html.DropDownList("WorkScheduleTableId", (IEnumerable<SelectListItem>)ViewBag.WorkScheduleList, new { @class = "selectpicker", @data_live_search = "true", @data_size = "10" })
            @Html.ValidationMessageFor(model => model.WorkScheduleTableId)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.TableName)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(model => model.TableName, new { @class = "form-control", @size = 256, @maxlength = 256, placeholder = "USR_REQ_IT_INCIDENT" })
            @Html.ValidationMessageFor(model => model.TableName)
        </div>

        <div class="editor-label">
            @Html.LabelForRequired(model => model.RoleName)
        </div>
        <div class="editor-field">
            @Html.DropDownList("RoleId", (IEnumerable<SelectListItem>)ViewBag.RolesList, new { @class = "selectpicker", @data_live_search = "true", @data_size = "10" })
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.isApproved)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.isApproved)
            @Html.ValidationMessageFor(model => model.isApproved)
        </div>

        <br>
        <blockquote>
            <p>@UIElementRes.UIElement.CreateWorkTimeHint</p>
        </blockquote>
        <div class="editor-label">
            @Html.LabelForRequired(model => model.StartWorkTime)
        </div>
        <div class="bootstrap-timepicker editor-field">
            @Html.TextBoxFor(model => model.StartWorkTime, new { @class = "timepicker" })
            <span class="add-on"><i class="glyphicon glyphicon-time"></i></span>
            @Html.ValidationMessageFor(model => model.StartWorkTime)
        </div>

        <div class="editor-label">
            @Html.LabelForRequired(model => model.EndWorkTime)
        </div>
        <div class="bootstrap-timepicker editor-field">
            @Html.TextBoxFor(model => model.EndWorkTime, new { @class = "timepicker" })
            <span class="add-on"><i class="glyphicon glyphicon-time"></i></span>
            @Html.ValidationMessageFor(model => model.EndWorkTime)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.MandatoryFileTypes)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(model => model.MandatoryFileTypes, new { @class = "form-control", @size = 256, @maxlength = 256, placeholder = ".PDF|.DOC|.XLS" })
            @Html.ValidationMessageFor(model => model.MandatoryFileTypes)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.DocSize)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(model => model.DocSize, new { @class = "form-control bfh-number" })
            @Html.ValidationMessageFor(model => model.DocSize)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.MandatoryDocDate)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(model => model.MandatoryDocDate, new { @class = "datetimepicker form-control form-control-date", startDate = "" })
            @Html.ValidationMessageFor(model => model.MandatoryDocDate)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.MandatoryNumberFiles)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(model => model.MandatoryNumberFiles, new { @class = "form-control bfh-number" })
            @Html.ValidationMessageFor(model => model.MandatoryNumberFiles)
        </div>

        <h3>Workflow</h3>
        @using (Ajax.BeginForm("FileUploadWF", "Process", new AjaxOptions() { HttpMethod = "POST" }, new { id = "formWF", enctype = "multipart/form-data" }))
        {
            <input type="file" name="fileWF"><br>
            <button id="buttonSubmitWF" type="button" class="btn btn-default">Upload File to Server</button>
        }
        <table class="table">
            <thead>
                <tr>
                    <th class="hidden"></th>
                    <th style="width: 30%;">File Name</th>
                    <th style="width: 20%;">Name</th>
                    <th style="width: 5%;">Version</th>
                    <th style="width: 40%;">Comments</th>
                    <th style="width: 5%;"></th>
                </tr>
            </thead>
            <tbody id="downloadWFTable">
                @Html.Action("DownloadFileWF", new { processId = Model.Id })
            </tbody>
        </table>


        @Html.HiddenFor(model => model.Id, new { @id = "documentFileId" })
        <br>
        <h3>@UIElementRes.UIElement.Templates</h3>
        <div class="row fileupload-buttonbar">
            <div class="col-lg-7">
                <!-- The fileinput-button span is used to style the file input field as button -->
                <span class="btn btn-success btn-xs fileinput-button">
                    <i class="glyphicon glyphicon-plus"></i>
                    <span>@UIElementRes.UIElement.AddFiles</span>
                    <input type="file" name="files" multiple>
                </span>
                <button type="button" class="btn btn-danger btn-xs delete">
                    <i class="glyphicon glyphicon-trash"></i>
                    <span>@UIElementRes.UIElement.Delete</span>
                </button>
                <!-- The global file processing state -->
                <span class="fileupload-process"></span>
            </div>
            <!-- The global progress state -->
            <div class="col-lg-5 fileupload-progress fade">
                <!-- The global progress bar -->
                <div class="progress progress-striped active" role="progressbar" aria-valuemin="0" aria-valuemax="100">
                    <div class="progress-bar progress-bar-success" style="width:0%;"></div>
                </div>
                <!-- The extended global progress state -->
                <div class="progress-extended">&nbsp;</div>
            </div>
        </div>
        <table role="presentation" class="table table-striped"><tbody class="files"></tbody></table>
        <br>

        @{Html.RenderPartial("SaveBackBtn");}
    </fieldset>
}

<!-- The template to display files available for upload -->
<script id="template-upload" type="text/x-tmpl">
    {% for (var i=0, file; file=o.files[i]; i++) { %}
    <tr class="template-upload fade">
        <td>
            <span class="preview"></span>
        </td>
        <td>
            <p class="name">{%=file.name%}</p>
            <strong class="error text-danger"></strong>
        </td>
        <td>
            <p class="size">Processing...</p>
            <div class="progress progress-striped active" role="progressbar" aria-valuemin="0" aria-valuemax="100" aria-valuenow="0"><div class="progress-bar progress-bar-success" style="width:0%;"></div></div>
        </td>
        <td>
            {% if (!i) { %}
            <button class="btn btn-warning btn-xs cancel">
                <i class="glyphicon glyphicon-ban-circle"></i>
                <span>@UIElementRes.UIElement.Cancel</span>
            </button>
            {% } %}
        </td>
    </tr>
    {% } %}
</script>
<!-- The template to display files available for download -->
<script id="template-download" type="text/x-tmpl">
    {% for (var i=0, file; file=o.files[i]; i++) { %}
    <tr class="template-download fade">
        <td>
            <span class="preview">
                {% if (file.thumbnailUrl) { %}
                <a href="{%=file.url%}" title="{%=file.name%}" download="{%=file.name%}" data-gallery><img src="{%=file.thumbnailUrl%}"></a>
                {% } %}
            </span>
        </td>
        <td>
            <p class="name">
                {% if (file.url) { %}
                <a href="{%=file.url%}" title="{%=file.name%}" download="{%=file.name%}">{%=file.name%}</a>
                {% } else { %}
                <span>{%=file.name%}</span>
                {% } %}
            </p>
            {% if (file.error) { %}
            <div><span class="label label-danger">Error</span> {%=file.error%}</div>
            {% } %}
        </td>
        <td>
            <span class="size">{%=o.formatFileSize(file.size)%}</span>
        </td>
        <td>
            {% if (file.deleteUrl) { %}
            <button class="btn btn-danger btn-xs delete" data-type="{%=file.deleteType%}" data-url="{%=file.deleteUrl%}" {% if (file.deletewithcredentials) { %} data-xhr-fields='{"withCredentials":true}' {% } %}>
                <i class="glyphicon glyphicon-trash"></i>
                <span>@UIElementRes.UIElement.Delete</span>
            </button>
            {% } else { %}
            <button class="btn btn-warning btn-xs cancel">
                <i class="glyphicon glyphicon-ban-circle"></i>
                <span>@UIElementRes.UIElement.Cancel</span>
            </button>
            {% } %}
        </td>
    </tr>
    {% } %}
</script>


@section Scripts {
    @Scripts.Render("~/bundles/editentity")
    @Scripts.Render("~/bundles/fileupload")
}
@section jsinit {
    var urlFileDownload = "@Url.Action("GetAllFileDocument", "Process", new { id = Model.Id })";
    var urlFileUpload = "@Url.Action("AjaxUpload", "Process", new { documentId = Model.Id })";
}
@section jslaunch {
<script type="text/javascript">
$(function () {
    selectpicker_init();
    timepicker_init();
    datetimepicker_init("@UIElementRes.UIElement.LangName");

    $("#buttonSubmitWF").click(function(){
        var formData = new FormData();
        formData.append('fileWF', $("input[type='file'][name='fileWF']")[0].files[0]);

        $.ajax({
             type: 'POST',
             url: '/Process/FileUploadWF/' + '@Model.Id',
             data: formData,
             contentType: false,
             processData: false,
             success: function (response) {
                 $("input[type='file'][name='fileWF']").val('');
                 $('#downloadWFTable').html(response);
                 editFileUploadData();
             }
        });
    });

    editFileUploadData();

    function editFileUploadData() {
        $('td.edit').click(function () {
            if ($('#editbox').length > 0) { return false }

            $('.ajax').html($('.ajax input').val());
            $('.ajax').removeClass('ajax');
            $(this).addClass('ajax');
            $(this).html('<input id="editbox" size="' + $(this).text().length + '" value="' + $(this).text() + '" type="text">');
            $('#editbox').focus();
        });

        $(document).on('blur', '#editbox', function () {
            $('.ajax').html($('.ajax input').val());
            $('.ajax').removeClass('ajax');
        });

        $('td.edit').keypress(function (event) {
            if (event.which == 10 || event.which == 13) {
                event.preventDefault();
                var rowId = $(this).closest("tr").find('.fileId').attr('id');
                var versionName = $(this).closest("tr").find('.versionName').find('#editbox').val();
                var version = $(this).closest("tr").find('.version').find('#editbox').val();
                var versionComments = $(this).closest("tr").find('.versionComments').find('#editbox').val();

                var formData = new FormData();
                formData.append('versionName', versionName);
                formData.append('version', version);
                formData.append('versionComments', versionComments);

                $.ajax({
                    type: 'POST',
                    url: '/Process/UpdateFileWF/' + rowId,
                    data: formData,
                    contentType: false,
                    processData: false,
                    success: function (response) {
                    }
                });

                $('.ajax').html($('.ajax input').val());
                $('.ajax').removeClass('ajax');

                return false;
            }
        });
    }
});
</script>
}