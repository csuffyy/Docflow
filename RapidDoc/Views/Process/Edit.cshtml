@model RapidDoc.Models.ViewModels.ProcessView
@using RapidDoc.Extensions;

@{
    ViewBag.Title = UIElementRes.UIElement.Edit;
}

<h2>@UIElementRes.UIElement.Edit</h2>

@using (Html.BeginForm("Edit", "Process", new { documentFileId = Model.Id }, FormMethod.Post, new { id = "ajaxUploadForm", enctype = "multipart/form-data" }))
{
    @Html.ValidationSummary(true)

    <fieldset>
        <legend></legend>
        <div class="editor-label">
            @Html.LabelForRequired(model => model.ProcessName)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(model => model.ProcessName, new { @class = "form-control", @size = 70, @maxlength = 70, placeholder = "IT Incident", @autofocus = "required", @x_webkit_speech = "" })
            @Html.ValidationMessageFor(model => model.ProcessName)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.Description)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(model => model.Description, new { @class = "form-control", @size = 256, @maxlength = 256, placeholder = "Incident Management", @x_webkit_speech = "" })
            @Html.ValidationMessageFor(model => model.Description)
        </div>

        <div class="editor-label">
            @Html.LabelForRequired(model => model.GroupProcessName)
        </div>
        <div class="editor-field">
            @Html.DropDownList("GroupProcessTableId", (IEnumerable<SelectListItem>)ViewBag.GroupProcessList, new { @class = "selectpicker", @data_live_search = "true", @data_size = "10" })
            @Html.ValidationMessageFor(model => model.GroupProcessTableId)
        </div>

        <div class="editor-label">
            @Html.LabelForRequired(model => model.WorkScheduleName)
        </div>
        <div class="editor-field">
            @Html.DropDownList("WorkScheduleTableId", (IEnumerable<SelectListItem>)ViewBag.WorkScheduleList, new { @class = "selectpicker", @data_live_search = "true", @data_size = "10" })
            @Html.ValidationMessageFor(model => model.WorkScheduleTableId)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.TableName)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(model => model.TableName, new { @class = "form-control", @size = 256, @maxlength = 256, placeholder = "USR_REQ_IT_INCIDENT" })
            @Html.ValidationMessageFor(model => model.TableName)
        </div>

        <div class="editor-label">
            @Html.LabelForRequired(model => model.RoleName)
        </div>
        <div class="editor-field">
            @Html.DropDownList("RoleId", (IEnumerable<SelectListItem>)ViewBag.RolesList, new { @class = "selectpicker", @data_live_search = "true", @data_size = "10" })
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.isApproved)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.isApproved)
            @Html.ValidationMessageFor(model => model.isApproved)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.MandatoryFileTypes)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(model => model.MandatoryFileTypes, new { @class = "form-control", @size = 256, @maxlength = 256, placeholder = "pdf|doc|xls" })
            @Html.ValidationMessageFor(model => model.MandatoryFileTypes)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.MandatoryNumberFiles)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(model => model.MandatoryNumberFiles, new { @class = "form-control bfh-number" })
            @Html.ValidationMessageFor(model => model.MandatoryNumberFiles)
        </div>
        @Html.HiddenFor(model => model.Id, new { @id = "documentFileId" })
        <br>
        <h3>@UIElementRes.UIElement.Templates</h3>
        <div class="row fileupload-buttonbar">
            <div class="col-lg-7">
                <!-- The fileinput-button span is used to style the file input field as button -->
                <span class="btn btn-success btn-xs fileinput-button">
                    <i class="glyphicon glyphicon-plus"></i>
                    <span>@UIElementRes.UIElement.AddFiles</span>
                    <input type="file" name="files" multiple>
                </span>
                <button type="button" class="btn btn-danger btn-xs delete">
                    <i class="glyphicon glyphicon-trash"></i>
                    <span>@UIElementRes.UIElement.Delete</span>
                </button>
                <!-- The global file processing state -->
                <span class="fileupload-process"></span>
            </div>
            <!-- The global progress state -->
            <div class="col-lg-5 fileupload-progress fade">
                <!-- The global progress bar -->
                <div class="progress progress-striped active" role="progressbar" aria-valuemin="0" aria-valuemax="100">
                    <div class="progress-bar progress-bar-success" style="width:0%;"></div>
                </div>
                <!-- The extended global progress state -->
                <div class="progress-extended">&nbsp;</div>
            </div>
        </div>
        <table role="presentation" class="table table-striped"><tbody class="files"></tbody></table>
        <br>

        @{Html.RenderPartial("SaveBackBtn");}
    </fieldset>
}

<!-- The template to display files available for upload -->
<script id="template-upload" type="text/x-tmpl">
    {% for (var i=0, file; file=o.files[i]; i++) { %}
    <tr class="template-upload fade">
        <td>
            <span class="preview"></span>
        </td>
        <td>
            <p class="name">{%=file.name%}</p>
            <strong class="error text-danger"></strong>
        </td>
        <td>
            <p class="size">Processing...</p>
            <div class="progress progress-striped active" role="progressbar" aria-valuemin="0" aria-valuemax="100" aria-valuenow="0"><div class="progress-bar progress-bar-success" style="width:0%;"></div></div>
        </td>
        <td>
            {% if (!i) { %}
            <button class="btn btn-warning btn-xs cancel">
                <i class="glyphicon glyphicon-ban-circle"></i>
                <span>@UIElementRes.UIElement.Cancel</span>
            </button>
            {% } %}
        </td>
    </tr>
    {% } %}
</script>
<!-- The template to display files available for download -->
<script id="template-download" type="text/x-tmpl">
    {% for (var i=0, file; file=o.files[i]; i++) { %}
    <tr class="template-download fade">
        <td>
            <span class="preview">
                {% if (file.thumbnailUrl) { %}
                <a href="{%=file.url%}" title="{%=file.name%}" download="{%=file.name%}" data-gallery><img src="{%=file.thumbnailUrl%}"></a>
                {% } %}
            </span>
        </td>
        <td>
            <p class="name">
                {% if (file.url) { %}
                <a href="{%=file.url%}" title="{%=file.name%}" download="{%=file.name%}">{%=file.name%}</a>
                {% } else { %}
                <span>{%=file.name%}</span>
                {% } %}
            </p>
            {% if (file.error) { %}
            <div><span class="label label-danger">Error</span> {%=file.error%}</div>
            {% } %}
        </td>
        <td>
            <span class="size">{%=o.formatFileSize(file.size)%}</span>
        </td>
        <td>
            {% if (file.deleteUrl) { %}
            <button class="btn btn-danger btn-xs delete" data-type="{%=file.deleteType%}" data-url="{%=file.deleteUrl%}" {% if (file.deletewithcredentials) { %} data-xhr-fields='{"withCredentials":true}' {% } %}>
                <i class="glyphicon glyphicon-trash"></i>
                <span>@UIElementRes.UIElement.Delete</span>
            </button>
            {% } else { %}
            <button class="btn btn-warning btn-xs cancel">
                <i class="glyphicon glyphicon-ban-circle"></i>
                <span>@UIElementRes.UIElement.Cancel</span>
            </button>
            {% } %}
        </td>
    </tr>
    {% } %}
</script>


@section Scripts {
    @Scripts.Render("~/bundles/editentity")
    @Scripts.Render("~/bundles/fileupload")
}
@section jsinit {
    var urlFileUpload = "@Url.Action("GetAllFileDocument", "Process")";
}
@section jslaunch {
    selectpicker_init();
}