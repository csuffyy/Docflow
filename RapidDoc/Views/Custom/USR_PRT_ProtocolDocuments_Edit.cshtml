@model RapidDoc.Models.ViewModels.USR_PRT_ProtocolDocuments_View
@using RapidDoc.Extensions;
@{
    if(Model.QuestionList == null)
    { 
        Model.QuestionList = new List<RapidDoc.Models.DomainModels.PRT_QuestionList_Table>();
        Model.QuestionList.Add(new RapidDoc.Models.DomainModels.PRT_QuestionList_Table() { DecisionList = new List<RapidDoc.Models.DomainModels.PRT_DecisionList_Table>() });
        Model.QuestionList.FirstOrDefault().DecisionList.Add(new RapidDoc.Models.DomainModels.PRT_DecisionList_Table());
    }
}

@Html.ValidationSummary(true)
<div class="row">
    <div class="col-xs-12">
        <div class="editor-label">
            @Html.LabelForRequired(model => Model.Code)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(model => Model.Code, new { @class = "form-control", placeholder = "Код" })
        </div>

        <div class="editor-label">
            @Html.LabelForRequired(model => Model.ProtocolFoldersTableId)
        </div>
        <div class="editor-field">
            @Html.Action("GetPRTFolderORD", "Custom", new { @processId = ViewBag.ProcessId, id = Model.ProtocolFoldersTableId })
        </div>

        <div class="editor-label">
            @Html.LabelForRequired(model => Model.Subject)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(model => Model.Subject, new { @class = "form-control", placeholder = "Тема документа" })
        </div>

        <div class="editor-label">
            @Html.LabelForRequired(model => Model.Location)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(model => Model.Location, new { @class = "form-control", placeholder = "Место проведения" })
        </div>

        <div class="editor-label">
            @Html.LabelForRequired(model => Model.Agenda)
        </div>
        <div class="editor-field">
            @Html.TextAreaFor(model => Model.Agenda, new { @class = "form-control", placeholder = "Повестка совещания" })
        </div>

        <div class="editor-label">
            @Html.LabelForRequired(model => Model.Introduction)
        </div>
        <div class="editor-field">
            @Html.TextAreaFor(model => Model.Introduction, new { @class = "form-control", placeholder = "Вступительное слово" })
        </div>
    </div>
</div>

<br />
<div class="panel panel-default">
    <div class="editor-label">
        @Html.LabelForRequired(model => Model.Attended)
    </div>
    <div class="editor-field">
        @Html.TextBoxFor(model => Model.Attended, new { @class = "form-control", @data_role = "tagsinputEmplBothOpt", placeholder = "Присутствовали" })
    </div>
    <div class="editor-label">
        @Html.LabelForRequired(model => Model.Invited)
    </div>
    <div class="editor-field">
        @Html.TextBoxFor(model => Model.Invited, new { @class = "form-control", @data_role = "tagsinputEmplBothOpt1", placeholder = "Приглашенные" })
    </div>
    <div class="editor-label">
        @Html.LabelForRequired(model => Model.Absent)
    </div>
    <div class="editor-field">
        @Html.TextBoxFor(model => Model.Absent, new { @class = "form-control", @data_role = "tagsinputEmplBothOpt2", placeholder = "Отсутствовали" })
    </div>
    <div class="editor-label">
        @Html.LabelForRequired(model => Model.Chairman)
    </div>
    <div class="editor-field">
        @Html.TextBoxFor(model => Model.Chairman, new { @class = "form-control", @data_role = "tagsinputEmplOne", placeholder = "Председатель"})
    </div>

    </div>
<hr />
<div class="row">
    <div class="col-xs-12">
        @if (Model.QuestionList != null && Model.QuestionList.Count() > 0)
        {
            foreach (var question in Model.QuestionList)
            {
                Html.RenderPartial("~/Views/Custom/_QuestionList.cshtml", question, new ViewDataDictionary { { "counter", Guid.NewGuid().ToString("N") } });
            }
        }
        @Html.ActionLink("Добавить вопрос", "CreateNewQuestionProtocol", "Custom", null, new { id = "addItemQuestion" })
    </div>
</div>

<script type="text/javascript">
    $(function () {
        numberQuestion();
        numberDecision();
        $("#addItemQuestion").click(function () {
            $.ajax({
                url: this.href,
                cache: false,
                success: function (html) {
                    $("#questionRow").append(html);
                    datepicker_init("@UIElementRes.UIElement.LangName");
                    custom_tagsinputEmplDynamic_init("@Url.Action("JsonEmpl", "Custom")");
                    summernotelight_init("@UIElementRes.UIElement.LangFullName");
                    numberQuestion();
                    numberDecision();
                }
            });
            return false;
        });
    });

    $(document).on('click', '.addItemDecision', function () {
        var itemdecisionid = event.target.id;
        itemdecisionid = itemdecisionid.replace("addItemDecision_", "decisionRow_");

        $.ajax({
            url: this.href,
            cache: false,
            success: function (html) {
                $("#" + itemdecisionid).append(html);
                datepicker_init("@UIElementRes.UIElement.LangName");
                custom_tagsinputEmplDynamic_init("@Url.Action("JsonEmpl", "Custom")");
                summernotelight_init("@UIElementRes.UIElement.LangFullName");
                numberDecision();
            }
        });
        return false;
    });

    function numberQuestion() {
        var prtQuestionNumber = 0;
        $('.questionNumber').each(function (i) {
            prtQuestionNumber = i + 1;
            $(this).text(prtQuestionNumber);
        });
    }
    function numberDecision() {
        var prtDecisionNumber = 0;
        var oldQuestion = '';
        $('.decisionNumber').each(function (i) {
            if (oldQuestion == '' || oldQuestion != this.id) {
                oldQuestion = this.id;
                prtDecisionNumber = 0;
            }

            prtDecisionNumber = prtDecisionNumber + 1;
            $(this).text(prtDecisionNumber);
        });
    }
</script>

