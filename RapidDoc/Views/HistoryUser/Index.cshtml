@model IEnumerable<RapidDoc.Models.ViewModels.HistoryUserView>
@{
    ViewBag.Title = UIElementRes.UIElement.Dashboard;
    var groups = Model.GroupBy(x => x.CreatedDate.ToShortDateString());
}

<br class="hidden-print">
<ul class="nav nav-tabs" role="tablist">
    <li><a href="@Url.Action("Index", "Document")"><span class="glyphicon glyphicon-tasks" aria-hidden="true"></span> @UIElementRes.UIElement.MyProcesses</a></li>
    <li><a href="@Url.Action("AgreedDocuments", "Document")"><span class="glyphicon glyphicon-check" aria-hidden="true"></span> @UIElementRes.UIElement.AgreedDocument</a></li>
    <li><a href="@Url.Action("MyDocuments", "Document")"><span class="glyphicon glyphicon-inbox" aria-hidden="true"></span> @UIElementRes.UIElement.MyDocument</a></li>
    <li class="visible-sm-inline-block visible-md-inline-block visible-lg-inline-block"><a href="@Url.Action("MyFavorite", "Document")"><span class="glyphicon glyphicon-star-empty" aria-hidden="true"></span> @UIElementRes.UIElement.MyFavorite</a></li>
    <li><a href="@Url.Action("MyTasks", "Document")"><span class="glyphicon glyphicon-calendar" aria-hidden="true"></span> @UIElementRes.UIElement.TaskBase</a></li>
    <li class="active"><a href="@Url.Action("Index", "HistoryUser")"><strong><span class="glyphicon glyphicon-time" aria-hidden="true"></span> @UIElementRes.UIElement.History</strong></a></li>
    <li><a href="@Url.Action("ArchiveDocuments", "Document")"><span class="glyphicon glyphicon-sort-by-attributes" aria-hidden="true"></span> @UIElementRes.UIElement.DocumentArchive</a></li>
</ul>
<br />
<div>
    @foreach (var group in groups)
    {
        <p><strong class="">@group.Key</strong></p>
        foreach (var item in Model.Where(x => x.CreatedDate.ToShortDateString() == group.Key).OrderByDescending(x => x.CreatedDate))
        {
            if (item.HistoryType == RapidDoc.Models.Repository.HistoryType.NewDocument)
            {
                <p>
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; @UIElementRes.UIElement.NewDocument
                    @Html.ActionLink(item.DocumentNum.ToString() + " " + "(" + item.ProcessName.ToString() + ")" + " (" + item.ApplicationCreatedUser + ")", "ShowDocument", "Document", new { id = item.DocumentTableId, isAfterView = true }, null)
                </p>
            }
            else if (item.HistoryType == RapidDoc.Models.Repository.HistoryType.NewComment)
            {
                <p>
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; @UIElementRes.UIElement.NewComment
                    @Html.ActionLink(item.DocumentNum.ToString() + " " + "(" + item.ProcessName.ToString() + ")" + " (" + item.ApplicationCreatedUser + ")", "ShowDocument", "Document", new { id = item.DocumentTableId, isAfterView = true }, null)
                </p>
            }
            else if (item.HistoryType == RapidDoc.Models.Repository.HistoryType.ApproveDocument)
            {
                <p>
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; @UIElementRes.UIElement.ApproveDocument
                    @Html.ActionLink(item.DocumentNum.ToString() + " " + "(" + item.ProcessName.ToString() + ")" + " (" + item.ApplicationCreatedUser + ")", "ShowDocument", "Document", new { id = item.DocumentTableId, isAfterView = true }, null)
                </p>
            }
            else if (item.HistoryType == RapidDoc.Models.Repository.HistoryType.CancelledDocument)
            {
                <p>
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; @UIElementRes.UIElement.RejectDocument
                    @Html.ActionLink(item.DocumentNum.ToString() + " " + "(" + item.ProcessName.ToString() + ")" + " (" + item.ApplicationCreatedUser + ")", "ShowDocument", "Document", new { id = item.DocumentTableId, isAfterView = true }, null)
                </p>
            }
            else if (item.HistoryType == RapidDoc.Models.Repository.HistoryType.AddReader)
            {
                <p>
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; @UIElementRes.UIElement.DocumentAddReaders @item.Description
                    @Html.ActionLink(item.DocumentNum.ToString() + " " + "(" + item.ProcessName.ToString() + ")" + " (" + item.ApplicationCreatedUser + ")", "ShowDocument", "Document", new { id = item.DocumentTableId, isAfterView = true }, null)
                </p>
            }
            else if (item.HistoryType == RapidDoc.Models.Repository.HistoryType.RemoveReader)
            {
                <p>
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; @UIElementRes.UIElement.DocumentRemoveReaders @item.Description
                    @Html.ActionLink(item.DocumentNum.ToString() + " " + "(" + item.ProcessName.ToString() + ")" + " (" + item.ApplicationCreatedUser + ")", "ShowDocument", "Document", new { id = item.DocumentTableId, isAfterView = true }, null)
                </p>
            }
            else if (item.HistoryType == RapidDoc.Models.Repository.HistoryType.DeletedFile)
            {
                <p>
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; @UIElementRes.UIElement.DocumentDeletedFile @item.Description
                    @Html.ActionLink(item.DocumentNum.ToString() + " " + "(" + item.ProcessName.ToString() + ")" + " (" + item.ApplicationCreatedUser + ")", "ShowDocument", "Document", new { id = item.DocumentTableId, isAfterView = true }, null)
                </p>
            }
            else if (item.HistoryType == RapidDoc.Models.Repository.HistoryType.Withdraw)
            {
                <p>
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; @UIElementRes.UIElement.WithdrawHistory
                    @Html.ActionLink(item.DocumentNum.ToString() + " " + "(" + item.ProcessName.ToString() + ")" + " (" + item.ApplicationCreatedUser + ")", "ShowDocument", "Document", new { id = item.DocumentTableId, isAfterView = true }, null)
                </p>
            }
            else if (item.HistoryType == RapidDoc.Models.Repository.HistoryType.CopyDocumment)
            {
                <p>
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; @UIElementRes.UIElement.CopyDocumentHistory
                    @Html.ActionLink(item.DocumentNum.ToString() + " " + "(" + item.ProcessName.ToString() + ")" + " (" + item.ApplicationCreatedUser + ")", "ShowDocument", "Document", new { id = item.DocumentTableId, isAfterView = true }, null)
                </p>
            }
            else if (item.HistoryType == RapidDoc.Models.Repository.HistoryType.DelegateTask)
            {
                <p>
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; @UIElementRes.UIElement.DelegateTaskHistory
                    @Html.ActionLink(item.DocumentNum.ToString() + " " + "(" + item.ProcessName.ToString() + ")" + " (" + item.ApplicationCreatedUser + ")", "ShowDocument", "Document", new { id = item.DocumentTableId, isAfterView = true }, null)
                </p>
            }
            else if (item.HistoryType == RapidDoc.Models.Repository.HistoryType.ModifiedDocument)
            {
                <p>
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; @UIElementRes.UIElement.ModifiedDocumentHistory
                    @Html.ActionLink(item.DocumentNum.ToString() + " " + "(" + item.ProcessName.ToString() + ")" + " (" + item.ApplicationCreatedUser + ")", "ShowDocument", "Document", new { id = item.DocumentTableId, isAfterView = true }, null)
                </p>
            }

        }
        <br />
    }
</div>
