@model IEnumerable<RapidDoc.Models.ViewModels.HistoryUserView>
@{
    ViewBag.Title = UIElementRes.UIElement.Dashboard;
    var groups = Model.GroupBy(x => x.CreatedDate.ToShortDateString());
}

<br class="hidden-print">
<ul class="nav nav-tabs" role="tablist">
    <li><a href="@Url.Action("Index", "Document")"><span class="fa fa-tasks"></span> @UIElementRes.UIElement.MyProcesses</a></li>
    <li><a href="@Url.Action("AgreedDocuments", "Document")"><span class="fa fa-check-circle"></span> @UIElementRes.UIElement.AgreedDocument</a></li>
    <li class="active"><a href="@Url.Action("Index", "HistoryUser")"><strong><span class="fa fa-list"></span> @UIElementRes.UIElement.History</strong></a></li>
    <li><a href="@Url.Action("ArchiveDocuments", "Document")"><span class="fa fa-archive"></span> @UIElementRes.UIElement.DocumentArchive</a></li>
</ul>
<br />
<div>
@foreach (var group in groups)
{
    <p><strong class="">@group.Key</strong></p>
    foreach (var item in group.OrderByDescending(x => x.CreatedDate))
    {
        if(item.HistoryType == RapidDoc.Models.Repository.HistoryType.NewDocument)
        {
            <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; @UIElementRes.UIElement.NewDocument 
                @Html.ActionLink(item.DocumentNum.ToString() + " " + "(" + item.ProcessName.ToString() + ")" + " ("+ item.ApplicationCreatedUser + ")", "ShowDocument", "Document", new { id = item.DocumentTableId, isAfterView = true }, null)</p>
        }
        else if (item.HistoryType == RapidDoc.Models.Repository.HistoryType.NewComment)
        {
            <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; @UIElementRes.UIElement.NewComment
                @Html.ActionLink(item.DocumentNum.ToString() + " " + "(" + item.ProcessName.ToString() + ")" + " (" + item.ApplicationCreatedUser + ")", "ShowDocument", "Document", new { id = item.DocumentTableId, isAfterView = true }, null)</p>
        }
        else if (item.HistoryType == RapidDoc.Models.Repository.HistoryType.ApproveDocument)
        {
            <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; @UIElementRes.UIElement.ApproveDocument
                @Html.ActionLink(item.DocumentNum.ToString() + " " + "(" + item.ProcessName.ToString() + ")" + " (" + item.ApplicationCreatedUser + ")", "ShowDocument", "Document", new { id = item.DocumentTableId, isAfterView = true }, null)</p>
        }
        else if (item.HistoryType == RapidDoc.Models.Repository.HistoryType.CancelledDocument)
        {
            <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; @UIElementRes.UIElement.RejectDocument
                @Html.ActionLink(item.DocumentNum.ToString() + " " + "(" + item.ProcessName.ToString() + ")" + " (" + item.ApplicationCreatedUser + ")", "ShowDocument", "Document", new { id = item.DocumentTableId, isAfterView = true }, null)</p>
        }
        else if (item.HistoryType == RapidDoc.Models.Repository.HistoryType.AddReader)
        {
            <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; @UIElementRes.UIElement.DocumentAddReaders @item.Description
                @Html.ActionLink(item.DocumentNum.ToString() + " " + "(" + item.ProcessName.ToString() + ")" + " (" + item.ApplicationCreatedUser + ")", "ShowDocument", "Document", new { id = item.DocumentTableId, isAfterView = true }, null)</p>
        }
        else if (item.HistoryType == RapidDoc.Models.Repository.HistoryType.RemoveReader)
        {
            <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; @UIElementRes.UIElement.DocumentRemoveReaders @item.Description
                @Html.ActionLink(item.DocumentNum.ToString() + " " + "(" + item.ProcessName.ToString() + ")" + " (" + item.ApplicationCreatedUser + ")", "ShowDocument", "Document", new { id = item.DocumentTableId, isAfterView = true }, null)</p>
        }
        else if (item.HistoryType == RapidDoc.Models.Repository.HistoryType.DeletedFile)
        {
            <p>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; @UIElementRes.UIElement.DocumentDeletedFile @item.Description
                @Html.ActionLink(item.DocumentNum.ToString() + " " + "(" + item.ProcessName.ToString() + ")" + " (" + item.ApplicationCreatedUser + ")", "ShowDocument", "Document", new { id = item.DocumentTableId, isAfterView = true }, null)
            </p>
        }
    }
    <br />
}
</div>
