@model IEnumerable<RapidDoc.Models.ViewModels.HistoryUserView>
@{
    ViewBag.Title = UIElementRes.UIElement.Dashboard;
    var groups = Model.GroupBy(x => x.CreatedDate.ToShortDateString());
}

<h3>
    <span class="fa fa fa-list"></span> @UIElementRes.UIElement.History

    <small>
        &nbsp;
        @Html.ActionLink(UIElementRes.UIElement.MyProcesses, "Index", "Home")
    </small>
</h3>
<br />
<div>
@foreach (var group in groups)
{
    <p><strong class="">@group.Key</strong></p>
    foreach (var item in group.OrderByDescending(x => x.CreatedDate))
    {
        if(item.HistoryType == RapidDoc.Models.Repository.HistoryType.NewDocument)
        {
            <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; @UIElementRes.UIElement.NewDocument 
                @Html.ActionLink(item.DocumentNum.ToString() + " " + "(" + item.ProcessName.ToString() + ")", "ShowDocument", "Document", new { id = item.DocumentTableId, isAfterView = true }, null)</p>
        }
        else if (item.HistoryType == RapidDoc.Models.Repository.HistoryType.NewComment)
        {
            <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; @UIElementRes.UIElement.NewComment
                @Html.ActionLink(item.DocumentNum.ToString() + " " + "(" + item.ProcessName.ToString() + ")", "ShowDocument", "Document", new { id = item.DocumentTableId, isAfterView = true }, null)</p>
        }
        else if (item.HistoryType == RapidDoc.Models.Repository.HistoryType.ApproveDocument)
        {
            <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; @UIElementRes.UIElement.ApproveDocument
                @Html.ActionLink(item.DocumentNum.ToString() + " " + "(" + item.ProcessName.ToString() + ")", "ShowDocument", "Document", new { id = item.DocumentTableId, isAfterView = true }, null)</p>
        }
        else if (item.HistoryType == RapidDoc.Models.Repository.HistoryType.CancelledDocument)
        {
            <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; @UIElementRes.UIElement.RejectDocument
                @Html.ActionLink(item.DocumentNum.ToString() + " " + "(" + item.ProcessName.ToString() + ")", "ShowDocument", "Document", new { id = item.DocumentTableId, isAfterView = true }, null)</p>
        }
    }
    <br />
}
</div>
