@model List<HistoryUserView>
@using RapidDoc.Models.ViewModels


@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.Title = UIElementRes.UIElement.PageNotFound;
}
<br>
<br>
<br>
<div class="jumbotron">
    <div class="container">
        <h2>@UIElementRes.UIElement.PageNotFoundTitle</h2>
        <p>@UIElementRes.UIElement.PageNotFoundText <strong>@Html.ActionLink("DOCFLOW", "Index", "Document")</strong></p>
    </div>
</div>

@if (Model != null && Model.Count() > 0)
{ 
    <strong><span class="glyphicon glyphicon-time" aria-hidden="true"></span> @UIElementRes.UIElement.History</strong>
    foreach (var item in Model.OrderBy(x => x.CreatedDate))
    {
        if (item.HistoryType == RapidDoc.Models.Repository.HistoryType.NewDocument)
        {
            <p>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; @UIElementRes.UIElement.NewDocument
                @item.DocumentNum.ToString() (@item.ProcessName.ToString()) (@item.CreatedBy)
            </p>
        }
        else if (item.HistoryType == RapidDoc.Models.Repository.HistoryType.NewComment)
        {
            <p>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; @UIElementRes.UIElement.NewComment
                @item.DocumentNum.ToString() (@item.ProcessName.ToString()) (@item.CreatedBy)
            </p>
        }
        else if (item.HistoryType == RapidDoc.Models.Repository.HistoryType.ApproveDocument)
        {
            <p>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; @UIElementRes.UIElement.ApproveDocument
                @item.DocumentNum.ToString() (@item.ProcessName.ToString()) (@item.CreatedBy)
            </p>
        }
        else if (item.HistoryType == RapidDoc.Models.Repository.HistoryType.CancelledDocument)
        {
            <p>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; @UIElementRes.UIElement.RejectDocument
                @item.DocumentNum.ToString() (@item.ProcessName.ToString()) (@item.CreatedBy)
            </p>
        }
        else if (item.HistoryType == RapidDoc.Models.Repository.HistoryType.AddReader)
        {
            <p>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; @UIElementRes.UIElement.DocumentAddReaders @item.Description
                @item.DocumentNum.ToString() (@item.ProcessName.ToString()) (@item.CreatedBy)
            </p>
        }
        else if (item.HistoryType == RapidDoc.Models.Repository.HistoryType.RemoveReader)
        {
            <p>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; @UIElementRes.UIElement.DocumentRemoveReaders @item.Description
                @item.DocumentNum.ToString() (@item.ProcessName.ToString()) (@item.CreatedBy)
            </p>
        }
        else if (item.HistoryType == RapidDoc.Models.Repository.HistoryType.DeletedFile)
        {
            <p>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; @UIElementRes.UIElement.DocumentDeletedFile @item.Description
                @item.DocumentNum.ToString() (@item.ProcessName.ToString()) (@item.CreatedBy)
            </p>
        }
        else if (item.HistoryType == RapidDoc.Models.Repository.HistoryType.Withdraw)
        {
            <p>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; @UIElementRes.UIElement.WithdrawHistory
                @item.DocumentNum.ToString() (@item.ProcessName.ToString()) (@item.CreatedBy)
            </p>
        }
        else if (item.HistoryType == RapidDoc.Models.Repository.HistoryType.CopyDocumment)
        {
            <p>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; @UIElementRes.UIElement.CopyDocumentHistory
                @item.DocumentNum.ToString() (@item.ProcessName.ToString()) (@item.CreatedBy)
            </p>
        }
        else if (item.HistoryType == RapidDoc.Models.Repository.HistoryType.DelegateTask)
        {
            <p>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; @UIElementRes.UIElement.DelegateTaskHistory
                @item.DocumentNum.ToString() (@item.ProcessName.ToString()) (@item.CreatedBy)
            </p>
        }
        else if (item.HistoryType == RapidDoc.Models.Repository.HistoryType.ModifiedDocument)
        {
            <p>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; @UIElementRes.UIElement.ModifiedDocumentHistory
                @item.DocumentNum.ToString() (@item.ProcessName.ToString()) (@item.CreatedBy)
            </p>
        }
        else if (item.HistoryType == RapidDoc.Models.Repository.HistoryType.DeleteDocument)
        {
            <p>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; @UIElementRes.UIElement.DeleteDocumentHistory
                @item.DocumentNum.ToString() (@item.ProcessName.ToString()) (@item.CreatedBy)
            </p>
        }

    }
}