@model RapidDoc.Models.Grids.DocumentGrid
@using RapidDoc.Extensions;
@using RapidDoc.Models.Repository;
@using GridMvc.Html;

@helper StatusField(RapidDoc.Models.DomainModels.DocumentTable item)
{
    if (item.SLAStatus == SLAStatusList.Disturbance)
    {
        <span class="text-danger"></span>
    }
    else if (item.SLAStatus == SLAStatusList.Warning)
    {
        <span class="text-warning"></span>
    }
}

@helper isNotReview(RapidDoc.Models.DomainModels.DocumentTable item)
{
    
}

@Html.Grid(Model).Named("ordersGrid").Columns(columns =>
{
    columns.Add(o => o.Id).Css("hidden");
    columns.Add()
        .Encoded(false)
        .Sanitized(false)
        .SetWidth(1)
        .isCssColClass(true)
        .Css("text-center empty")
        .RenderValueAs(o => isNotReview(o));
    columns.Add()
        .Encoded(false)
        .Sanitized(false)
        .SetWidth(1)
        .Css("text-center empty")
        .RenderValueAs(o => StatusField(o));
    columns.Add(o => o.DocumentNum).Titled("#").Sortable(true).Filterable(true);
    columns.Add(o => o.ProcessName).Titled(Html.DisplayNameFor(o => ((RapidDoc.Models.DomainModels.DocumentTable)o.Columns).ProcessName).ToHtmlString()).Sortable(false).Filterable(false);
    columns.Add(o => o.DocumentText).Titled(Html.DisplayNameFor(o => ((RapidDoc.Models.DomainModels.DocumentTable)o.Columns).DocumentText).ToHtmlString()).Sortable(false).Filterable(true);
    columns.Add(o => o.ActivityName).Titled(Html.DisplayNameFor(o => ((RapidDoc.Models.DomainModels.DocumentTable)o.Columns).ActivityName).ToHtmlString()).Sortable(true).Filterable(true);
    columns.Add(o => o.DocumentState).Titled(Html.DisplayNameFor(o => ((RapidDoc.Models.DomainModels.DocumentTable)o.Columns).DocumentState).ToHtmlString()).Sortable(true).Filterable(true).RenderValueAs(o => o.DocumentState.GetDescription());
    columns.Add(o => o.CreatedDate).Titled(Html.DisplayNameFor(o => ((RapidDoc.Models.DomainModels.DocumentTable)o.Columns).CreatedDate).ToHtmlString()).Sortable(true).Filterable(false).RenderValueAs(o => Html.DateTimeLocalFor(modelItem => o.CreatedDate, (string)ViewBag.CurrentTimeId));
    columns.Add(o => o.CreatedBy).Titled(Html.DisplayNameFor(o => ((RapidDoc.Models.DomainModels.DocumentTable)o.Columns).CreatedBy).ToHtmlString()).Sortable(false).Filterable(false);
}).Selectable(true).SetLanguage(UIElementRes.UIElement.LangName).WithPaging(30).SetColCssClasses(o => o.isNotReview ? "" : "info allocation text-center empty")