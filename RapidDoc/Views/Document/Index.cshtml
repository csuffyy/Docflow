@using GridMvc.Html;
@{
    ViewBag.Title = UIElementRes.UIElement.Dashboard;
}

<br class="hidden-print">
<ul class="nav nav-tabs" role="tablist">
    <li class="active"><a href="#"><strong><span class="glyphicon glyphicon-tasks" aria-hidden="true"></span> <span class="visible-md-inline-block visible-lg-inline-block">@UIElementRes.UIElement.MyProcesses</span></strong></a></li>
    <li><a href="@Url.Action("AgreedDocuments", "Document")"><span class="glyphicon glyphicon-check" aria-hidden="true"></span> <span class="visible-md-inline-block visible-lg-inline-block">@UIElementRes.UIElement.AgreedDocument</span></a></li>
    <li class="visible-md-inline-block visible-lg-inline-block"><a href="@Url.Action("MyDocuments", "Document")"><span class="glyphicon glyphicon-inbox" aria-hidden="true"></span> @UIElementRes.UIElement.MyDocument</a></li>
    <li class="visible-md-inline-block visible-lg-inline-block"><a href="@Url.Action("MyFavorite", "Document")"><span class="glyphicon glyphicon-star-empty" aria-hidden="true"></span> @UIElementRes.UIElement.MyFavorite</a></li>
    <li><a href="@Url.Action("MyTasks", "Document")"><span class="glyphicon glyphicon-calendar" aria-hidden="true"></span> <span class="visible-md-inline-block visible-lg-inline-block">@UIElementRes.UIElement.TaskBase</span></a></li>
    <li class="visible-md-inline-block visible-lg-inline-block"><a href="@Url.Action("Index", "HistoryUser")"><span class="glyphicon glyphicon-time" aria-hidden="true"></span> @UIElementRes.UIElement.History</a></li>
    <li class="visible-md-inline-block visible-lg-inline-block"><a href="@Url.Action("ArchiveDocuments", "Document")"><span class="glyphicon glyphicon-sort-by-attributes" aria-hidden="true"></span> @UIElementRes.UIElement.DocumentArchive</a></li>
</ul>

<div>
    @Html.Action("GetAllDocument", "Document")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/gridmvc")
    @Scripts.Render("~/bundles/pnotify")
}

@section jslaunch {
<script type="text/javascript">
    var currentDocCount = 0;
    var timerCheckDocActive;
    var jsonStrCheckDocActive = "@Url.Action("GetActiveDocumentCount", "Document")";
    var showUser = 0;

    $(function () {
       
        grid_init("@Url.Action("GetDocumentList", "Document")");
        popover_init();

        pageGrids.ordersGrid.onRowSelect(function (e) {
            window.location.href = '/' + e.row.AliasCompanyName + '/' + 'Document/ShowDocument/' + e.row.Id;
        });

        try {
            $.getJSON(jsonStrCheckDocActive, null,
            function (data) {
                currentDocCount = data.doccount;
            });
        }
        catch (e) {
        }

        timerCheckDocActive = setInterval(checkNewActiveDoc, 900000);
    });

    function checkNewActiveDoc() {
        try {
            $.getJSON(jsonStrCheckDocActive, null,
            function (data) {
                var doccount = data.doccount;

                if (doccount > currentDocCount) {
                    document.title = "DOCFLOW - (" + Math.floor(doccount - currentDocCount) + ")";

                    if (showUser == 0) {
                        showUser = 1;

                        new PNotify({
                            title: '@UIElementRes.UIElement.Dashboard',
                            text: '@UIElementRes.UIElement.RefreshActiveDocument',
                            icon: 'glyphicon glyphicon-question-sign',
                            hide: false,
                            type: 'info',
                            addclass: 'hidden-print',
                            confirm: {
                                confirm: true,
                                buttons: [{
                                    text: 'OK',
                                    addClass: 'btn-info btn-sm',
                                    click: function (notice) {
                                        window.location.reload();
                                    }
                                }, null]
                            },
                            buttons: {
                                closer: true,
                                sticker: false
                            },
                            history: {
                                history: false
                            }
                        });
                    }
                }
            }).error(function () {
                clearInterval(timerCheckDocActive);
            });
        }
        catch (e) {
            clearInterval(timerCheckDocActive);
        }
    }
</script>
}