@model RapidDoc.Models.ViewModels.DocumentComposite
@using RapidDoc.Extensions;
@{
    ViewBag.Title = Model.DocumentTable.DocumentNum + " - " + Model.ProcessView.ProcessName;
}

<h2>
    @if (Model.DocumentTable.isArchive == true)
{
    <span class="fa fa-archive"></span>
}
    
    @ViewBag.Title <small class="">@Model.DocumentTable.DocumentState.GetDescription()</small></h2>
    <div class="pull-right hidden-sm hidden-xs">
        <a href=@Url.Action("Index", "Home") class="btn btn-default" role="button">@UIElementRes.UIElement.Close</a>
    </div>
    <legend></legend>
    <h5 class="text-right">(@ViewBag.CompanyName) @ViewBag.Initiator <small>@ViewBag.TitleName, @ViewBag.DepartmentName,  </small> @ViewBag.CreatedDate</h5>

    @using (Html.BeginForm("PostDocument", "Document", new { processId = Model.ProcessView.Id, type = 2, fileId = Model.fileId, documentId = Model.DocumentTable.Id, actionModelName = Model.ProcessView.TableName }, FormMethod.Post, new { id = "ajaxUploadForm", enctype = "multipart/form-data" }))
    {
        @Html.AntiForgeryToken()
        @Html.ValidationSummary(false)

        <fieldset>
            @Html.HiddenFor(model => model.ProcessView.Id)
            @Html.HiddenFor(model => model.DocumentTable.Id)
            @Html.HiddenFor(model => model.fileId, new { @id = "documentFileId" })
            @Html.Action("GetDocumentData", new { modelDoc = Model.docData, idProcess = Model.ProcessView.Id, viewType = "View" })
            <br>
            <h3>@UIElementRes.UIElement.AttachedFiles</h3>
            <table role="presentation" class="table table-striped"><tbody class="files"></tbody></table>

            <br>
            <h3>@UIElementRes.UIElement.ProgressWork</h3>

            @if (Model.WFTrackerItems.Count() > 0)
            {
                <div class="table-responsive">
                    <table class="table table-condensed">
                        <thead>
                            <tr>
                                <th class="actionField">
                                    #
                                </th>
                                <td class="actionField"></td>
                                <th>
                                    @Html.DisplayNameFor(model => Model.WFTrackerItems.FirstOrDefault().ActivityName)
                                </th>
                                <th>
                                    @Html.DisplayNameFor(model => Model.WFTrackerItems.FirstOrDefault().Executors)
                                </th>
                                <th>
                                    @Html.DisplayName(FieldNameRes.FieldNameResource.PerformToDate)
                                </th>
                                <th>
                                    @Html.DisplayNameFor(model => Model.WFTrackerItems.FirstOrDefault().SignDate)
                                </th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var trackerItem in Model.WFTrackerItems)
                            {
                                <tr>
                                    <td>
                                        <span class="label label-primary rowNum cellAligmentMiddle">@Html.DisplayFor(modelItem => trackerItem.RowNum)</span>
                                    </td>
                                    <td>
                                        @if ((trackerItem.ManualExecutor == true && Model.DocumentTable.isSign) || (User.IsInRole("Administrator") && trackerItem.TrackerType == RapidDoc.Models.Repository.TrackerType.Waiting))
                                        {
                                            <a href=@Url.Action("AddExecutor", new { id = Model.DocumentTable.Id, activityId = trackerItem.ActivityID })><span class="fa fa-users fa-lg"></span></a>
                                        }
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => trackerItem.ActivityName)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => trackerItem.Executors)
                                    </td>
                                    <td>
                                        @if (trackerItem.PerformToDate != null)
                                        {
                                            @Html.DateTimeLocalFor(modelItem => trackerItem.PerformToDate)
                                        }
                                    </td>
                                    <td>
                                        @if (trackerItem.SignDate != null)
                                        {
                                            @Html.DateTimeLocalFor(modelItem => trackerItem.SignDate)
                                        }
                                    </td>
                                    <th>
                                        @if (trackerItem.TrackerType == RapidDoc.Models.Repository.TrackerType.Waiting)
                                        {
                                            <span class="fa fa-spinner fa-spin fa-2x text-primary"></span>
                                        }
                                        @if (trackerItem.TrackerType == RapidDoc.Models.Repository.TrackerType.Approved)
                                        {
                                            <span class="fa fa-check fa-2x text-primary"></span>
                                        }
                                        @if (trackerItem.TrackerType == RapidDoc.Models.Repository.TrackerType.Cancelled)
                                        {
                                            <span class="fa fa-times fa-2x text-primary"></span>
                                        }
                                    </th>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
            <br>
            <h3>@FieldNameRes.FieldNameResource.Comments</h3>
            @Html.Action("GetAllComment", "Document", new { documentId = Model.DocumentTable.Id })
            <br>
            @if ((Model.DocumentTable.DocumentState == RapidDoc.Models.Repository.DocumentState.Agreement || Model.DocumentTable.DocumentState == RapidDoc.Models.Repository.DocumentState.Execution) && Model.DocumentTable.isSign)
            {
                <input class="btn btn-success" type="submit" name="approveDoc" value=@UIElementRes.UIElement.Approve />
                <input class="btn btn-danger" type="submit" name="rejectDoc" value=@UIElementRes.UIElement.Reject />
            }

            <div class="btn-group">
                <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown">
                    @UIElementRes.UIElement.Create <span class="caret"></span>
                </button>
                <ul class="dropdown-menu" role="menu">
                    <li><a href=@Url.Action("AddReader", new { id = Model.DocumentTable.Id })>@UIElementRes.UIElement.Reader</a></li>
                    @if (Model.DocumentTable.isArchive == false)
                    {
                        <li><a href=@Url.Action("DocumentToArchive", new { id = Model.DocumentTable.Id })>@UIElementRes.UIElement.ToArchive</a></li>
                    }
                    else
                    {
                        <li><a href=@Url.Action("DocumentFromArchive", new { id = Model.DocumentTable.Id })>@UIElementRes.UIElement.FromArchive</a></li>
                    }
                </ul>
            </div>

            <a href=@Url.Action("Index", "Home") class="btn btn-default" role="button">@UIElementRes.UIElement.Close</a>
        </fieldset>
    }

    <br>
    <p>
        <h4 class="text-right">@UIElementRes.UIElement.AddComment</h4>
        @using (Ajax.BeginForm("GetAllComment", new { documentId = Model.DocumentTable.Id }, new AjaxOptions { UpdateTargetId = "comments", OnComplete = "clearTextAreaComment" }))
        {
            <div class="">
                @Html.TextArea("lastComment", new { @class = "form-control", @rows = "3" })
                <input class="btn btn-default btn-sm pull-right" type="submit" value=@UIElementRes.UIElement.Save>
            </div>
            <br>
        }

        <script type="text/javascript">
            function clearTextAreaComment(result) {
                $('#lastComment').val('');
            }
        </script>
    </p>
    <br>
    <br>
    <div class="row">
        <div id="qrcode" class="pull-right"></div>
    </div>

    <!-- The template to display files available for upload -->
    <script id="template-upload" type="text/x-tmpl">
        {% for (var i=0, file; file=o.files[i]; i++) { %}
        <tr class="template-upload fade">
            <td>
                <span class="preview"></span>
            </td>
            <td>
                <p class="name">{%=file.name%}</p>
                <strong class="error text-danger"></strong>
            </td>
            <td>
                <p class="size">Processing...</p>
                <div class="progress progress-striped active" role="progressbar" aria-valuemin="0" aria-valuemax="100" aria-valuenow="0"><div class="progress-bar progress-bar-success" style="width:0%;"></div></div>
            </td>
            <td></td>
        </tr>
        {% } %}
    </script>
    <!-- The template to display files available for download -->
    <script id="template-download" type="text/x-tmpl">
        {% for (var i=0, file; file=o.files[i]; i++) { %}
        <tr class="template-download fade">
            <td>
                <span class="preview">
                    {% if (file.thumbnailUrl) { %}
                    <a href="{%=file.url%}" title="{%=file.name%}" download="{%=file.name%}" data-gallery><img src="{%=file.thumbnailUrl%}"></a>
                    {% } %}
                </span>
            </td>
            <td>
                <p class="name">
                    {% if (file.url) { %}
                    <a href="{%=file.url%}" title="{%=file.name%}" download="{%=file.name%}">{%=file.name%}</a>
                    {% } else { %}
                    <span>{%=file.name%}</span>
                    {% } %}
                </p>
                {% if (file.error) { %}
                <div><span class="label label-danger">Error</span> {%=file.error%}</div>
                {% } %}
            </td>
            <td>
                <span class="size">{%=o.formatFileSize(file.size)%}</span>
            </td>
            <td></td>
        </tr>
        {% } %}
    </script>

    @section Scripts {
        @Scripts.Render("~/bundles/editentity")
        @Scripts.Render("~/bundles/fileupload")
    }
    @section jsinit {
        var urlFileUpload = "@Url.Action("GetAllFileDocument", "Document")";
    }
    @section jslaunch {
        qrcode_init();
    }
