@model RapidDoc.Models.ViewModels.DocumentComposite
@using RapidDoc.Extensions;
@{
    ViewBag.Title = Model.DocumentView.DocumentNum + " - " + Model.ProcessView.ProcessName;
}

<div class="row hidden-print">
    <div class="col-xs-6"> 
        <h5><a href="@ViewBag.DocumentUrl" id="documenturl" target="_blank">#@Model.DocumentView.DocumentNum</a><strong> - @Model.ProcessView.ProcessName</strong></h5>
        <h5>
            <small class="">@Model.DocumentView.DocumentState.GetDescription()</small>
            @if (Model.DocumentView.isArchive == true)
            {
                <span class="fa fa-archive"></span>
            }
        </h5>
    </div>
    <div class="col-xs-6">
        <h5 class="text-right"><small class="hidden-print">(@ViewBag.CompanyName)</small> @ViewBag.Initiator <small>@ViewBag.TitleName, @ViewBag.DepartmentName, @ViewBag.CreatedDate</small></h5>
        @if (!String.IsNullOrEmpty(ViewBag.ModificationUser))
        {
            <h5 class="text-right"><small>Проработано:</small> @ViewBag.ModificationUser</h5>
        }
    </div>
</div>
<div class="row visible-print">
    <div class="col-xs-5">
        <h5>
            <span>@Model.DocumentView.DocumentNum - @Model.ProcessView.ProcessName</span>
            <small class="">@Model.DocumentView.DocumentState.GetDescription()</small>
            @if (Model.DocumentView.isArchive == true)
            {
                <span class="fa fa-archive"></span>
            }
        </h5>
    </div>
    <div class="col-xs-5">
        <h5 class="text-right"><small class="hidden-print">(@ViewBag.CompanyName)</small> @ViewBag.Initiator <small>@ViewBag.TitleName, @ViewBag.DepartmentName, @ViewBag.CreatedDate@ViewBag.ModificationUser</small></h5>
    </div>
    <div class="col-xs-2">
        <div id="qrcode" class="pull-right"></div>
    </div>
</div>

@using (Html.BeginForm("", "", new { processId = Model.ProcessView.Id, type = 2, fileId = Model.fileId, documentId = Model.DocumentView.Id, actionModelName = Model.ProcessView.TableName }, FormMethod.Post, new { id = "ajaxUploadForm", enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(false)

    <fieldset>
        @Html.HiddenFor(model => model.ProcessView.Id)
        @Html.HiddenFor(model => model.fileId)
        @Html.Action("GetDocumentData", new { modelDoc = Model.docData, Model.ProcessView.TableName, viewType = "View" })
        <br class="hidden-print">
        @if (Model.DocumentView.DocumentState != RapidDoc.Models.Repository.DocumentState.Closed && Model.DocumentView.DocumentState != RapidDoc.Models.Repository.DocumentState.Cancelled)
        {     
            <h4 class="hidden-print">@UIElementRes.UIElement.AttachedFiles
            <span class="btn btn-primary btn-xs fileinput-button">
                <i class="glyphicon glyphicon-plus"></i>
                <span>@UIElementRes.UIElement.AddFiles</span>
                <input type="file" name="files" multiple>
            </span>
            </h4>
            if (!String.IsNullOrEmpty(Model.ProcessView.MandatoryFileTypes))
            {
                <h5 class="text-danger hidden-print">@UIElementRes.UIElement.SupportFileTypes: @Model.ProcessView.MandatoryFileTypes</h5>
            }
        }
        <table role="presentation" class="table table-striped table-condensed"><tbody class="files"></tbody></table>
        <h4 class="hidden-print">@UIElementRes.UIElement.ProgressWork</h4>
        <br class="visible-print">
        @Html.Action("GetTrackerList", "Document", new { id = Model.DocumentView.Id, signDocument = Model.DocumentView.isSign })
        @Html.Action("GetTaskList", "Document", new { id = Model.DocumentView.Id })
        <div class="hidden-print">
        @if (((List<RapidDoc.Models.ViewModels.HistoryUserView>)ViewBag.RejectHistory).Count() > 0 && Model.DocumentView.DocumentState != RapidDoc.Models.Repository.DocumentState.Cancelled && Model.DocumentView.DocumentState != RapidDoc.Models.Repository.DocumentState.OnSign)
        {
            <ul>
                @foreach (var history in (List<RapidDoc.Models.ViewModels.HistoryUserView>)ViewBag.RejectHistory)
                {
                    <li>@UIElementRes.UIElement.DocumentReject <abbr title="@history.CreatedEmplName" class="initialism popover-link" data-container="body" data-toggle="popover" data-placement="left" data-content="@history.CreatedEmplDepartment - @history.CreatedEmplTitle">@history.CreatedBy</abbr> @Html.DateTimeLocal(history.CreatedDate)</li>
                }
            </ul>
        }
        @if (((List<RapidDoc.Models.ViewModels.HistoryUserView>)ViewBag.AddReaders).Count() > 0)
        {
            <a data-toggle="collapse" href="#collapseExample" aria-expanded="false" aria-controls="collapseExample">@UIElementRes.UIElement.DocumentAddReaders</a>
            <div class="collapse" id="collapseExample">
                <div class="well">
                    <div class="row">
                        <div class="col-xs-6">
                            <ul>
                                @foreach (var history in (List<RapidDoc.Models.ViewModels.HistoryUserView>)ViewBag.AddReaders)
                                {
                                    <li>@UIElementRes.UIElement.DocumentAddReaders @history.Description @Html.DateTimeLocal(history.CreatedDate), <abbr title="@history.CreatedEmplName" class="initialism popover-link" data-container="body" data-toggle="popover" data-placement="left" data-content="@history.CreatedEmplDepartment - @history.CreatedEmplTitle">@history.CreatedBy</abbr></li>
                                }
                            </ul>
                        </div>
                        <div class="col-xs-6">
                            @if (((List<RapidDoc.Models.ViewModels.HistoryUserView>)ViewBag.RemoveReaders).Count() > 0)
                            {
                                <ul>
                                    @foreach (var history in (List<RapidDoc.Models.ViewModels.HistoryUserView>)ViewBag.RemoveReaders)
                                    {
                                        <li>@UIElementRes.UIElement.DocumentRemoveReaders @history.Description @Html.DateTimeLocal(history.CreatedDate), <abbr title="@history.CreatedEmplName" class="initialism popover-link" data-container="body" data-toggle="popover" data-placement="left" data-content="@history.CreatedEmplDepartment - @history.CreatedEmplTitle">@history.CreatedBy</abbr></li>
                                    }
                                </ul>
                            }
                        </div>
                    </div>
                </div>
            </div>
        }
        </div>
           
        @if (Model.DocumentView.DocType != RapidDoc.Models.Repository.DocumentType.OfficeMemo)
        { 
            @Html.Action("GetAllComment", "Document", new { documentId = Model.DocumentView.Id })
            <hr />
        }

        @if ((Model.DocumentView.DocumentState == RapidDoc.Models.Repository.DocumentState.Agreement || Model.DocumentView.DocumentState == RapidDoc.Models.Repository.DocumentState.Execution || Model.DocumentView.DocumentState == RapidDoc.Models.Repository.DocumentState.OnSign) && Model.DocumentView.isSign)
        {
            if (Model.DocumentView.DocType == RapidDoc.Models.Repository.DocumentType.Request || Model.DocumentView.DocType == RapidDoc.Models.Repository.DocumentType.Order || (Model.DocumentView.DocumentState == RapidDoc.Models.Repository.DocumentState.Agreement && Model.DocumentView.DocType == RapidDoc.Models.Repository.DocumentType.OfficeMemo))
            {
                <button type="button" class="btn btn-success hidden-print" data-toggle="modal" data-target=".bs-approve-modal-sm">@UIElementRes.UIElement.Approve</button>
                <button type="button" class="btn btn-danger hidden-print" data-toggle="modal" data-target=".bs-reject-modal-sm">@UIElementRes.UIElement.Reject</button>
            }
            else
            {
                <button type="button" class="btn btn-success hidden-print" data-toggle="modal" data-target=".approvecz-modal-sm">@UIElementRes.UIElement.Approve</button>
                <button type="button" class="btn btn-danger hidden-print" data-toggle="modal" data-target=".rejectcz-modal-sm">@UIElementRes.UIElement.Reject</button>                       
            }
        }

        @if ((Model.DocumentView.DocumentState == RapidDoc.Models.Repository.DocumentState.Agreement || Model.DocumentView.DocumentState == RapidDoc.Models.Repository.DocumentState.Execution) && Model.DocumentView.CreatedBy == User.Identity.Name)
        {
            <button type="button" class="btn btn-danger hidden-print" data-toggle="modal" data-target=".bs-withdraw-modal-sm">@UIElementRes.UIElement.Withdraw</button>
        }
        
        @if (Model.DocumentView.isArchive == true)
        {
            <a href=@Url.Action("DocumentFromArchive", new { id = Model.DocumentView.Id }) class="btn btn-primary hidden-print">@UIElementRes.UIElement.FromArchive</a>
        }
        else
        {
            if (Model.DocumentView.isSign == false && (Model.DocumentView.DocumentState == RapidDoc.Models.Repository.DocumentState.Closed ||
                    Model.DocumentView.DocumentState == RapidDoc.Models.Repository.DocumentState.Cancelled ||
                    Model.DocumentView.DocumentState == RapidDoc.Models.Repository.DocumentState.Created ||
                    Model.DocumentView.DocumentState == RapidDoc.Models.Repository.DocumentState.OnSign))
            {
                <a href=@Url.Action("DocumentToArchive", new { id = Model.DocumentView.Id }) class="btn btn-primary hidden-print">@UIElementRes.UIElement.ToArchive</a>
            }
        }

        <div class="btn-group hidden-print">
            <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown">
                @UIElementRes.UIElement.Create <span class="caret"></span>
            </button>
            <ul class="dropdown-menu" role="menu">
                <li><a href=@Url.Action("AddReader", new { id = Model.DocumentView.Id })>@UIElementRes.UIElement.Reader</a></li>
                <li>
                    <a href=@Url.Action("CopyDocument", new { processId = Model.ProcessView.Id, fileId = Model.fileId, documentId = Model.DocumentView.Id })>@UIElementRes.UIElement.Copy</a>
                </li>
                @if (Model.DocumentView.DocType == RapidDoc.Models.Repository.DocumentType.Order && Model.DocumentView.DocumentState == RapidDoc.Models.Repository.DocumentState.Closed)
                {
                    <li>
                        <a href="#" data-toggle="modal" data-target=".deliveryOrder-modal">@UIElementRes.UIElement.Delivery</a>
                    </li>
                }
                @if (Model.DocumentView.DocType == RapidDoc.Models.Repository.DocumentType.OfficeMemo &&
                        Model.DocumentView.DocumentState == RapidDoc.Models.Repository.DocumentState.OnSign)
                {
                    <li>
                        <a href="#" data-toggle="modal" data-target=".addusers-modal">@UIElementRes.UIElement.SendBookmark</a>
                    </li>   
                }
                @if (Model.DocumentView.DocType == RapidDoc.Models.Repository.DocumentType.Task &&
                    (Model.DocumentView.DocumentState == RapidDoc.Models.Repository.DocumentState.Agreement ||
                    Model.DocumentView.DocumentState == RapidDoc.Models.Repository.DocumentState.OnSign) && (Model.DocumentView.CreatedBy != User.Identity.Name))
                {
                    <li>
                        <a href="#" data-toggle="modal" data-target=".delegatetask-modal-sm">@UIElementRes.UIElement.Delegate</a>
                    </li>
                    <li>
                        <a href=@Url.Action("ProlongDocumentTask", new { tableName = Model.ProcessView.TableName, documentId = Model.DocumentView.Id })>@UIElementRes.UIElement.Prolong</a>
                    </li>
                }
                @if (Model.DocumentView.DocType != RapidDoc.Models.Repository.DocumentType.Task &&
                    (Model.DocumentView.DocumentState == RapidDoc.Models.Repository.DocumentState.Agreement ||
                    Model.DocumentView.DocumentState == RapidDoc.Models.Repository.DocumentState.OnSign))
                {
                    <li>
                        <a href=@Url.Action("CreateTaskFromDocument", new {documentId = Model.DocumentView.Id})>@UIElementRes.UIElement.CreateTask</a>
                    </li>
                }
            </ul>
        </div>

        <div class="modal bs-reject-modal-sm" tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <div class="alert_placeholder"></div>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                        <h4 class="modal-title">Отмена документа</h4>
                    </div>
                    <div class="modal-body" style="min-height:250px;">
                        @Html.TextArea("RejectCommentRequest", new { @class = "form-control", @placeholder = "Обязательно укажите причину отмены" })
                        <div class="modal-footer">
                            <button type="submit" id="rejectRequest" class="btn btn-danger" name="action:RejectDocument">@UIElementRes.UIElement.Reject</button>
                            <button type="button" class="btn btn-default" data-dismiss="modal">@UIElementRes.UIElement.Cancel</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="modal bs-approve-modal-sm" tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                        <h4 class="modal-title">Утверждение документа</h4>
                    </div>
                    <div class="modal-body" style="min-height:200px;">
                        @Html.TextArea("ApproveCommentRequest", new { @class = "form-control", @placeholder = "Замечания" })
                        <div class="modal-footer">
                            <button type="submit" id="approveRequest" class="btn btn-success" name="action:ApproveDocument">@UIElementRes.UIElement.Approve</button>
                            <button type="button" class="btn btn-default" data-dismiss="modal">@UIElementRes.UIElement.Cancel</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="modal bs-withdraw-modal-sm" tabindex="-1" role="dialog" aria-labelledby="mySmallModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-sm">
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                        <h4 class="modal-title">@UIElementRes.UIElement.Confirmation</h4>
                    </div>
                    <div class="modal-body">
                        <p>@UIElementRes.UIElement.WithdrawQuestion</p>
                    </div>
                    <div class="modal-footer">
                        <button type="submit" class="btn btn-success" name="action:WithdrawDocument">@UIElementRes.UIElement.Yes</button>
                        <button type="button" class="btn btn-danger" data-dismiss="modal">@UIElementRes.UIElement.No</button>
                    </div>
                </div>
            </div>
        </div>

        <a href="javascript:window.print()" class="btn btn-default hidden-print">@UIElementRes.UIElement.Print</a>
        <a href=@Url.Action("Index", "Document") class="btn btn-default hidden-print" role="button">@UIElementRes.UIElement.Close</a>
    </fieldset>
}

@if(Model.DocumentView.DocType != RapidDoc.Models.Repository.DocumentType.OfficeMemo)
{
<p>
    <h4 class="text-right hidden-print">@UIElementRes.UIElement.AddComment</h4>
    @using (Ajax.BeginForm("GetAllComment", new { documentId = Model.DocumentView.Id }, new AjaxOptions { UpdateTargetId = "comments", OnComplete = "clearTextAreaComment" }, new { name = "commentForm" }))
    {
        <div class="hidden-print">
            @Html.TextArea("lastComment", new { @class = "form-control", @rows = "3" })
            <div class="row">
                <div class="col-md-7 visible-lg-inline"></div>
                <div class="col-md-5"><button type="submit" class="btn btn-primary btn-xs btn-block pull-right" id="saveCommentBtn">@UIElementRes.UIElement.Save / Ctrl + Enter</button></div>
            </div>
        </div>
        <br class="hidden-print">
    }
</p>
}

<!-- The template to display files available for upload -->
<script id="template-upload" type="text/x-tmpl">
    {% for (var i=0, file; file=o.files[i]; i++) { %}
    <tr class="template-upload fade">
        <td>
            <span class="preview"></span>
        </td>
        <td>
            <p class="name">{%=file.name%}</p>
            <strong class="error text-danger"></strong>
        </td>
        <td>
            <p class="size">Processing...</p>
            <div class="progress progress-striped active" role="progressbar" aria-valuemin="0" aria-valuemax="100" aria-valuenow="0"><div class="progress-bar progress-bar-success" style="width:0%;"></div></div>
        </td>
        <td>
            {% if (!i) { %}
            <button class="btn btn-warning btn-xs cancel">
                <i class="glyphicon glyphicon-ban-circle"></i>
                <span>@UIElementRes.UIElement.Cancel</span>
            </button>
            {% } %}
        </td>
    </tr>
    {% } %}
</script>
<!-- The template to display files available for download -->
<script id="template-download" type="text/x-tmpl">
    {% for (var i=0, file; file=o.files[i]; i++) { %}
    <tr class="visible-print">
        <td>{%=file.name%}, {%=file.createdDate%}, {%=file.versionName%}</td>
    </tr>
    <tr class="template-download fade hidden-print">
        <td class="fileuploadtdid hidden">
            {%=file.id%}
        </td>
        <td>
            <span class="preview">
                {% if (file.thumbnailUrl) { %}
                <a href="{%=file.url%}" title="{%=file.name%}" download="{%=file.name%}" data-gallery><img src="{%=file.thumbnailUrl%}"></a>
                {% } %}
            </span>
        </td>
        <td>
            <p class="name">
                {% if (file.url) { %}
                {% if (file.isReplaceFile) { %}
                <a href="{%=file.url%}" title="{%=file.name%}" download="{%=file.name%}" class="text-danger"><del>{%=file.name%}</del></a>
                {% } else { %}
                <a href="{%=file.url%}" title="{%=file.name%}" download="{%=file.name%}">{%=file.name%}</a>
                {% } %}
                {% } else { %}
                <span>{%=file.name%}</span>
                {% } %}
            </p>
            {% if (file.error) { %}
            <div><span class="label label-danger">Error</span> {%=file.error%}</div>
            {% } %}
        </td>
        <td>
            <span class="size">{%=o.formatFileSize(file.size)%}</span>
        </td>
        <td>
            {%=file.createdUser%}
        </td>
        <td>
            {%=file.createdDate%}
        </td>
        <td>
            {%=file.versionName%}
        </td>
        <td>
            {% if (file.isReplaceFile === false && file.isClosed === false) { %}
            <span class="btn btn-default btn-xs fileinput-button">
                <i class="glyphicon glyphicon-repeat"></i>
                <span>@UIElementRes.UIElement.Replace</span>
                <input class="fileuploadreplace" type="file" name="files2[]" onclick="replaceFile(this);">
            </span>
            {% } %}
        </td>
        <td>
            {% if (file.deleteUrl) { %}
            {% if (file.deleteType != "") { %}
            <button class="btn btn-danger btn-xs delete" data-type="{%=file.deleteType%}" data-url="{%=file.deleteUrl%}" {% if (file.deletewithcredentials) { %} data-xhr-fields='{"withCredentials":true}' {% } %}>
                <i class="glyphicon glyphicon-trash"></i>
                <span>@UIElementRes.UIElement.Delete</span>
            </button>
            {% } %}
            {% } else { %}
            <button class="btn btn-warning btn-xs cancel">
                <i class="glyphicon glyphicon-ban-circle"></i>
                <span>@UIElementRes.UIElement.Cancel</span>
            </button>
            {% } %}
        </td>
    </tr>
    {% } %}
</script>
      
<script type="text/javascript">
    function clearTextAreaComment(result) {
        $('#lastComment').val('');

        var button = $(this).find('button[type="submit"]');
        setTimeout(function () {
            button.removeAttr("disabled");
        }, 0);
    }

    function saveLastComment() {
        var lastComment = $('#lastComment').val();
        if (lastComment) {
            document.getElementById('saveCommentBtn').click();
        }
    }
</script>

@section Scripts {
    @Scripts.Render("~/bundles/editentity")
    @Scripts.Render("~/bundles/fileupload")
    @Scripts.Render("~/bundles/pnotify")
}
@section jsinit {
    var urlFileDownload = "@Url.Action("GetAllFileDocument", "Document", new { id = Model.fileId })";
    var urlFileUpload = "@Url.Action("AjaxUpload", "Document", new { processId = Model.ProcessView.Id, fileId = Model.fileId })";
}
@section jslaunch {
<script type="text/javascript">
    $(function () {
        selectpicker_init();
        selectpickerfull_init();
        datepicker_init("@UIElementRes.UIElement.LangName");
        datetimepicker_init("@UIElementRes.UIElement.LangName");
        summernote_init("@UIElementRes.UIElement.LangFullName");
        custom_tagsinputEmpl_init("@Url.Action("JsonEmpl", "Custom")");
        custom_tagsinputEmpl2_init("@Url.Action("JsonEmpl", "Custom")");
        custom_tagsinputEmpl3_init("@Url.Action("JsonEmpl", "Custom")");
        custom_tagsinputEmpl4_init("@Url.Action("JsonEmpl", "Custom")");
        custom_tagsinputGroup2_init("@Url.Action("JsonGroup", "Custom")");
        custom_tagsinputEmplIntercompany_init("@Url.Action("JsonEmplIntercompany", "Custom")");
        custom_tagsinputEmplOne_init("@Url.Action("JsonEmpl", "Custom")");
        custom_tagsinputOnlyGroup_init("@Url.Action("GetJsonOnlyGroup", "Custom")");
        popover_init();
        qrcode_init();

        bootstrap_alert = function () { }
        bootstrap_alert.warning = function (message) {
            $('.alert_placeholder').html('<div class="alert alert-danger" role="alert"><span class="glyphicon glyphicon-exclamation-sign" aria-hidden="true"></span><span class="sr-only">Error:</span>' + message + '</div>')
        }

        $('#rejectRequest').click(function (event) {
            var comment = $('#RejectCommentRequest').val();
            if (comment == "") {
                bootstrap_alert.warning('Необходимо заполнить причину отклонения');
                event.preventDefault();
                return false;
            }
        });

        $('#lastComment').keydown(function (e) {
            var key = e.charCode ? e.charCode : e.keyCode ? e.keyCode : 0;
            if (event.ctrlKey && key == 13) {
                e.preventDefault();
                document.getElementById('saveCommentBtn').click();
            }
        });

        $('#documenturl').click(function (e) {
            var doc = document;
            var text = this;

            if (doc.body.createTextRange) { // ms
                var range = doc.body.createTextRange();
                range.moveToElementText(text);
                range.select();
            } else if (window.getSelection) { // moz, opera, webkit
                var selection = window.getSelection();
                var range = doc.createRange();
                range.selectNodeContents(text);
                selection.removeAllRanges();
                selection.addRange(range);
            }

            new PNotify({
                title: '@UIElementRes.UIElement.LinkToDocument',
                text: '@UIElementRes.UIElement.LinkToDocumentText',
                type: 'info',
                delay: 3000,
                animate_speed: 'fast',
                addclass: 'hidden-print'
            });

            return false;
        });
    });

    function replaceFile(e) {
        var replaceFileId = $(e).closest('tr').find('.fileuploadtdid').text().trim();
        $('.fileuploadreplace').fileupload({
            dataType: 'json',
            limitMultiFileUploads: 1,
            url: "@(Url.Action("AjaxUploadReplaceFile", "Document", new { processId = Model.ProcessView.Id, fileId = Model.fileId }))" + "&fileDocId=" + replaceFileId,
            autoUpload: true,
            done: function (e, data) {
                location.reload();
            }
        });
    }
</script>
}
