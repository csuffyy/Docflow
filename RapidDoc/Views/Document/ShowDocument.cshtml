@model RapidDoc.Models.ViewModels.DocumentComposite
@using RapidDoc.Extensions;
@{
    ViewBag.Title = Model.DocumentView.DocumentNum + " - " + Model.ProcessView.ProcessName;
}

<h2 class="hidden-print">
    @if (Model.DocumentView.isArchive == true)
    {
        <span class="fa fa-archive"></span>
    }

    @ViewBag.Title <small class="">@Model.DocumentView.DocumentState.GetDescription()</small>
</h2>
<h5 class="visible-print-block">@ViewBag.Title</h5>
    <div class="pull-right hidden-sm hidden-xs">
        <a href=@Url.Action("Index", "Document") class="btn btn-default" role="button">@UIElementRes.UIElement.Close</a>
    </div>
    <legend class="hidden-print"></legend>
    <h4 class="text-right"><small>(@ViewBag.CompanyName)</small> @ViewBag.Initiator <small>@ViewBag.TitleName, @ViewBag.DepartmentName, @ViewBag.CreatedDate</small></h4>

    @using (Html.BeginForm("PostDocument", "Document", new { processId = Model.ProcessView.Id, type = 2, fileId = Model.fileId, documentId = Model.DocumentView.Id, actionModelName = Model.ProcessView.TableName }, FormMethod.Post, new { id = "ajaxUploadForm", enctype = "multipart/form-data" }))
    {
        @Html.AntiForgeryToken()
        @Html.ValidationSummary(false)

    <fieldset>
        @Html.HiddenFor(model => model.ProcessView.Id)
        @Html.HiddenFor(model => model.DocumentView.Id)
        @Html.HiddenFor(model => model.fileId, new { @id = "documentFileId" })
        @Html.Action("GetDocumentData", new { modelDoc = Model.docData, Model.ProcessView.TableName, viewType = "View" })
            <br class="hidden-print">
            <h3 class="hidden-print">@UIElementRes.UIElement.AttachedFiles</h3>
            <table role="presentation" class="table table-striped hidden-print"><tbody class="files"></tbody></table>
            <br>
            <h3 class="hidden-print">@UIElementRes.UIElement.ProgressWork</h3>

            @if (Model.WFTrackerItems.Count() > 0)
        {
                <div class="table-responsive">
                    <table class="table table-condensed">
                        <thead>
                            <tr>
                                <th class="actionField">
                                    #
                                </th>
                                <td class="actionField"></td>
                                <th>
                                    @Html.DisplayNameFor(model => Model.WFTrackerItems.First().ActivityName)
                                </th>
                                <th>
                                    @Html.DisplayNameFor(model => Model.WFTrackerItems.First().Executors)
                                </th>
                                <th class="hidden-print">
                                    @Html.DisplayName(FieldNameRes.FieldNameResource.PerformToDate)
                                </th>
                                <th>
                                    @Html.DisplayNameFor(model => Model.WFTrackerItems.First().SignDate)
                                </th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var trackerItem in Model.WFTrackerItems)
                        {
                                <tr>
                                    <td>
                                        <span class="label label-primary rowNum cellAligmentMiddle">@Html.DisplayFor(modelItem => trackerItem.RowNum)</span>
                                    </td>
                                    <td class="hidden-print">
                                        @if ((trackerItem.ManualExecutor == true && Model.DocumentView.isSign) || (User.IsInRole("Administrator") && trackerItem.TrackerType == RapidDoc.Models.Repository.TrackerType.Waiting))
                                    {
                                            <a href=@Url.Action("AddExecutor", new { id = Model.DocumentView.Id, activityId = trackerItem.ActivityID })><span class="fa fa-users fa-lg"></span></a>
                                    }
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => trackerItem.ActivityName)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => trackerItem.Executors)
                                    </td>
                                    <td class="hidden-print">
                                        @if (trackerItem.PerformToDate != null)
                                    {
                                            @Html.DateTimeLocalFor(modelItem => trackerItem.PerformToDate)
                                    }
                                    </td>
                                    <td>
                                        @if (trackerItem.SignDate != null)
                                    {
                                            @Html.DateTimeLocalFor(modelItem => trackerItem.SignDate)
                                    }
                                    </td>
                                    <th>
                                        @if (trackerItem.TrackerType == RapidDoc.Models.Repository.TrackerType.Waiting)
                                    {
                                            <span class="fa fa-spinner fa-spin fa-2x text-primary"></span>
                                    }
                                        @if (trackerItem.TrackerType == RapidDoc.Models.Repository.TrackerType.Approved)
                                    {
                                            <span class="fa fa-check fa-2x text-primary"></span>
                                    }
                                        @if (trackerItem.TrackerType == RapidDoc.Models.Repository.TrackerType.Cancelled)
                                    {
                                            <span class="fa fa-times fa-2x text-primary"></span>
                                    }
                                    </th>
                                </tr>
                        }
                        </tbody>
                    </table>
                    <div class="hidden-print">
                        @if (((List<RapidDoc.Models.ViewModels.HistoryUserView>)ViewBag.RejectHistory).Count() > 0)
                    {
                            <ul>
                                @foreach (var history in (List<RapidDoc.Models.ViewModels.HistoryUserView>)ViewBag.RejectHistory)
                            {
                                    <li>@UIElementRes.UIElement.DocumentReject <abbr title="@history.CreatedEmplName" class="initialism popover-link" data-container="body" data-toggle="popover" data-placement="left" data-content="@history.CreatedEmplDepartment - @history.CreatedEmplTitle">@history.CreatedBy</abbr> @Html.DateTimeLocal(history.CreatedDate)</li>
                            }
                            </ul>
                    }
                        <div class="row">
                            <div class="col-md-6">
                                @if (((List<RapidDoc.Models.ViewModels.HistoryUserView>)ViewBag.AddReaders).Count() > 0)
                            {
                                    <ul>
                                        @foreach (var history in (List<RapidDoc.Models.ViewModels.HistoryUserView>)ViewBag.AddReaders)
                                    {
                                            <li>@UIElementRes.UIElement.DocumentAddReaders @history.Description @Html.DateTimeLocal(history.CreatedDate), <abbr title="@history.CreatedEmplName" class="initialism popover-link" data-container="body" data-toggle="popover" data-placement="left" data-content="@history.CreatedEmplDepartment - @history.CreatedEmplTitle">@history.CreatedBy</abbr></li>
                                    }
                                    </ul>
                            }
                            </div>
                            <div class="col-md-6">
                                @if (((List<RapidDoc.Models.ViewModels.HistoryUserView>)ViewBag.RemoveReaders).Count() > 0)
                            {
                                    <ul>
                                        @foreach (var history in (List<RapidDoc.Models.ViewModels.HistoryUserView>)ViewBag.RemoveReaders)
                                    {
                                            <li>@UIElementRes.UIElement.DocumentRemoveReaders @history.Description @Html.DateTimeLocal(history.CreatedDate), <abbr title="@history.CreatedEmplName" class="initialism popover-link" data-container="body" data-toggle="popover" data-placement="left" data-content="@history.CreatedEmplDepartment - @history.CreatedEmplTitle">@history.CreatedBy</abbr></li>
                                    }
                                    </ul>
                            }
                            </div>
                        </div>
                    </div>
                </div>
        }
</fieldset>
    }
            <br class="hidden-print">
            <h3 class="hidden-print">@FieldNameRes.FieldNameResource.Comments</h3>
            @Html.Action("GetAllComment", "Document", new { documentId = Model.DocumentView.Id })
            <p>
                <h4 class="text-right hidden-print">@UIElementRes.UIElement.AddComment</h4>
                @using (Ajax.BeginForm("GetAllComment", new { documentId = Model.DocumentView.Id }, new AjaxOptions { UpdateTargetId = "comments", OnComplete = "clearTextAreaComment" }))
                {
                    <div class="hidden-print">
                        @Html.TextArea("lastComment", new { @class = "form-control", @rows = "3" })
                            <div class="row">
                                <div class="col-md-7 visible-lg-inline"><kbd>Ctrl + Enter</kbd></div>
                                <div class="col-md-5"><input class="btn btn-primary btn-xs btn-block pull-right" id="saveCommentBtn" type="submit" value=@UIElementRes.UIElement.Save></div>
                            </div>
                        </div>
                    <br class="hidden-print">
                }
            </p>
            
@if ((Model.DocumentView.DocumentState == RapidDoc.Models.Repository.DocumentState.Agreement || Model.DocumentView.DocumentState == RapidDoc.Models.Repository.DocumentState.Execution) && Model.DocumentView.isSign)
{
    <input class="btn btn-success hidden-print" type="submit" name="approveDoc" id="approveDocId" value=@UIElementRes.UIElement.Approve />
    <input class="btn btn-danger hidden-print" type="submit" name="rejectDoc" id="rejectDocId" value=@UIElementRes.UIElement.Reject />
}

            <div class="btn-group hidden-print">
                <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown">
                    @UIElementRes.UIElement.Create <span class="caret"></span>
                </button>
                <ul class="dropdown-menu" role="menu">
                    <li><a href=@Url.Action("AddReader", new { id = Model.DocumentView.Id })>@UIElementRes.UIElement.Reader</a></li>
                    @if (Model.DocumentView.isArchive == false)
                    {
                        <li><a href=@Url.Action("DocumentToArchive", new { id = Model.DocumentView.Id })>@UIElementRes.UIElement.ToArchive</a></li>
                    }
                    else
                    {
                        <li><a href=@Url.Action("DocumentFromArchive", new { id = Model.DocumentView.Id })>@UIElementRes.UIElement.FromArchive</a></li>
                    }
                </ul>
            </div>

            <a href=@Url.Action("Index", "Document") class="btn btn-default hidden-print" role="button">@UIElementRes.UIElement.Close</a>
        
<script type="text/javascript">
    function clearTextAreaComment(result) {
        $('#lastComment').val('');

        var button = $(this).find('input[type="submit"]');
        setTimeout(function () {
            button.removeAttr("disabled");
        }, 0);
    }

    $('#approveDocId').on("click", function () {
        var approveDoc = document.createElement("input");
        approveDoc.type = "hidden";
        approveDoc.name = "approveDoc";
        approveDoc.value = "approveDoc";

        var lastComment = document.createElement("input");
        lastComment.type = "hidden";
        lastComment.name = "lastComment";
        lastComment.value = $('#lastComment').val();

        var f = document.getElementById("ajaxUploadForm");
        f.appendChild(approveDoc);
        f.appendChild(lastComment);
        f.submit();
    });

    $('#rejectDocId').on("click", function () {
        var commentText = $('#lastComment').val();
        var rejectDoc = document.createElement("input");
        rejectDoc.type = "hidden";
        rejectDoc.name = "rejectDoc";
        rejectDoc.value = "rejectDoc";

        var lastComment = document.createElement("input");
        lastComment.type = "hidden";
        lastComment.name = "lastComment";
        lastComment.value = commentText;

        var f = document.getElementById("ajaxUploadForm");
        f.appendChild(rejectDoc);
        f.appendChild(lastComment);
        f.submit();
    });
</script>
    <br class="hidden-print">
    <br class="hidden-print">
    <div class="row visible-lg-inline">
        <div id="qrcode" class="pull-right"></div>
    </div>

    <!-- The template to display files available for upload -->
    <script id="template-upload" type="text/x-tmpl">
        {% for (var i=0, file; file=o.files[i]; i++) { %}
        <tr class="template-upload fade">
            <td>
                <span class="preview"></span>
            </td>
            <td>
                <p class="name">{%=file.name%}</p>
                <strong class="error text-danger"></strong>
            </td>
            <td>
                <p class="size">Processing...</p>
                <div class="progress progress-striped active" role="progressbar" aria-valuemin="0" aria-valuemax="100" aria-valuenow="0"><div class="progress-bar progress-bar-success" style="width:0%;"></div></div>
            </td>
            <td></td>
        </tr>
        {% } %}
    </script>
    <!-- The template to display files available for download -->
    <script id="template-download" type="text/x-tmpl">
        {% for (var i=0, file; file=o.files[i]; i++) { %}
        <tr class="template-download fade">
            <td>
                <span class="preview">
                    {% if (file.thumbnailUrl) { %}
                    <a href="{%=file.url%}" title="{%=file.name%}" download="{%=file.name%}" data-gallery><img src="{%=file.thumbnailUrl%}"></a>
                    {% } %}
                </span>
            </td>
            <td>
                <p class="name">
                    {% if (file.url) { %}
                    <a href="{%=file.url%}" title="{%=file.name%}" download="{%=file.name%}">{%=file.name%}</a>
                    {% } else { %}
                    <span>{%=file.name%}</span>
                    {% } %}
                </p>
                {% if (file.error) { %}
                <div><span class="label label-danger">Error</span> {%=file.error%}</div>
                {% } %}
            </td>
            <td>
                <span class="size">{%=o.formatFileSize(file.size)%}</span>
            </td>
            <td></td>
        </tr>
        {% } %}
    </script>

    @section Scripts {
        @Scripts.Render("~/bundles/editentity")
        @Scripts.Render("~/bundles/fileupload")
    }
    @section jsinit {
        var urlFileUpload = "@Url.Action("GetAllFileDocument", "Document")";
    }
@section jslaunch {
<script type="text/javascript">
    $(function () {
        selectpicker_init();
        datepicker_init("@UIElementRes.UIElement.LangName");
        datetimepicker_init("@UIElementRes.UIElement.LangName");
        custom_tagsinputEmpl_init("@Url.Action("JsonEmpl", "Custom")");
        custom_tagsinputEmpl2_init("@Url.Action("JsonEmpl", "Custom")");
        qrcode_init();

        $('#lastComment').keydown(function (e) {
            var key = e.charCode ? e.charCode : e.keyCode ? e.keyCode : 0;
            if (event.ctrlKey && key == 13) {
                e.preventDefault();
                document.getElementById('saveCommentBtn').click();
            }
        });

        $('.popover-link').popover({
            trigger: 'hover',
            placement: 'auto'
        })
    });
</script>
}
