@model RapidDoc.Models.ViewModels.DocumentComposite
@using RapidDoc.Extensions;
@{
    ViewBag.Title = Model.DocumentView.DocumentNum + " - " + Model.ProcessView.ProcessName;
}

<div class="row">
    <div class="col-xs-6">
        @if (Model.DocumentView.isArchive == true)
        {
            <span class="fa fa-archive"></span>
        }
        <h5 class="hidden-print"><a href="@ViewBag.DocumentUrl" id="documenturl">#@Model.DocumentView.DocumentNum</a><strong> - @Model.ProcessView.ProcessName</strong></h5>
        <h4>
            <span class="visible-print-inline">@Model.DocumentView.DocumentNum - @Model.ProcessView.ProcessName</span>
            <small class="">@Model.DocumentView.DocumentState.GetDescription()</small>
        </h4>
    </div>
    <div class="col-xs-6">
        <h4 class="text-right"><small class="hidden-print">(@ViewBag.CompanyName)</small> @ViewBag.Initiator <small>@ViewBag.TitleName, @ViewBag.DepartmentName, @ViewBag.CreatedDate</small></h4>
    </div>
</div>
<hr />
    @using (Html.BeginForm("", "", new { processId = Model.ProcessView.Id, type = 2, fileId = Model.fileId, documentId = Model.DocumentView.Id, actionModelName = Model.ProcessView.TableName }, FormMethod.Post, new { id = "ajaxUploadForm", enctype = "multipart/form-data" }))
    {
        @Html.AntiForgeryToken()
        @Html.ValidationSummary(false)

        <fieldset>
            @Html.HiddenFor(model => model.ProcessView.Id)
            @Html.HiddenFor(model => model.fileId)
            @Html.Action("GetDocumentData", new { modelDoc = Model.docData, Model.ProcessView.TableName, viewType = "View" })
            <br class="hidden-print">
            @if (Model.DocumentView.DocumentState != RapidDoc.Models.Repository.DocumentState.Closed && Model.DocumentView.DocumentState != RapidDoc.Models.Repository.DocumentState.Cancelled)
            {     
                <h3 class="hidden-print">@UIElementRes.UIElement.AttachedFiles</h3>
                if (!String.IsNullOrEmpty(Model.ProcessView.MandatoryFileTypes))
                {
                    <h5 class="text-danger hidden-print">@UIElementRes.UIElement.SupportFileTypes: @Model.ProcessView.MandatoryFileTypes</h5>
                }
                <div class="row fileupload-buttonbar hidden-print">
                    <div class="col-lg-7">
                        <!-- The fileinput-button span is used to style the file input field as button -->
                        @if(Model.DocumentView.DocumentState != RapidDoc.Models.Repository.DocumentState.Closed && Model.DocumentView.DocumentState != RapidDoc.Models.Repository.DocumentState.Cancelled)
                        { 
                        <span class="btn btn-success btn-xs fileinput-button">
                            <i class="glyphicon glyphicon-plus"></i>
                            <span>@UIElementRes.UIElement.AddFiles</span>
                            <input type="file" name="files" multiple>
                        </span>
                        }
                        <!-- The global file processing state -->
                        <span class="fileupload-process"></span>
                    </div>
                    <!-- The global progress state -->
                    <div class="col-lg-5 fileupload-progress fade">
                        <!-- The global progress bar -->
                        <div class="progress progress-striped active" role="progressbar" aria-valuemin="0" aria-valuemax="100">
                            <div class="progress-bar progress-bar-success" style="width:0%;"></div>
                        </div>
                        <!-- The extended global progress state -->
                        <div class="progress-extended">&nbsp;</div>
                    </div>
                </div>
            }
            <table role="presentation" class="table table-striped hidden-print"><tbody class="files"></tbody></table>
            <br>
            <h3 class="hidden-print">@UIElementRes.UIElement.ProgressWork</h3>
            @Html.Action("GetTrackerList", "Document", new { id = Model.DocumentView.Id, signDocument = Model.DocumentView.isSign })

            <div class="hidden-print">
            @if (((List<RapidDoc.Models.ViewModels.HistoryUserView>)ViewBag.RejectHistory).Count() > 0)
            {
                <ul>
                    @foreach (var history in (List<RapidDoc.Models.ViewModels.HistoryUserView>)ViewBag.RejectHistory)
                    {
                        <li>@UIElementRes.UIElement.DocumentReject <abbr title="@history.CreatedEmplName" class="initialism popover-link" data-container="body" data-toggle="popover" data-placement="left" data-content="@history.CreatedEmplDepartment - @history.CreatedEmplTitle">@history.CreatedBy</abbr> @Html.DateTimeLocal(history.CreatedDate)</li>
                    }
                </ul>
            }
                <div class="row">
                    <div class="col-md-6">
                        @if (((List<RapidDoc.Models.ViewModels.HistoryUserView>)ViewBag.AddReaders).Count() > 0)
                        {
                            <ul>
                                @foreach (var history in (List<RapidDoc.Models.ViewModels.HistoryUserView>)ViewBag.AddReaders)
                                {
                                    <li>@UIElementRes.UIElement.DocumentAddReaders @history.Description @Html.DateTimeLocal(history.CreatedDate), <abbr title="@history.CreatedEmplName" class="initialism popover-link" data-container="body" data-toggle="popover" data-placement="left" data-content="@history.CreatedEmplDepartment - @history.CreatedEmplTitle">@history.CreatedBy</abbr></li>
                                }
                            </ul>
                        }
                    </div>
                    <div class="col-md-6">
                        @if (((List<RapidDoc.Models.ViewModels.HistoryUserView>)ViewBag.RemoveReaders).Count() > 0)
                        {
                            <ul>
                                @foreach (var history in (List<RapidDoc.Models.ViewModels.HistoryUserView>)ViewBag.RemoveReaders)
                                {
                                    <li>@UIElementRes.UIElement.DocumentRemoveReaders @history.Description @Html.DateTimeLocal(history.CreatedDate), <abbr title="@history.CreatedEmplName" class="initialism popover-link" data-container="body" data-toggle="popover" data-placement="left" data-content="@history.CreatedEmplDepartment - @history.CreatedEmplTitle">@history.CreatedBy</abbr></li>
                                }
                            </ul>
                        }
                    </div>
                </div>
            </div>
           
            @Html.Action("GetAllComment", "Document", new { documentId = Model.DocumentView.Id })

            @if ((Model.DocumentView.DocumentState == RapidDoc.Models.Repository.DocumentState.Agreement || Model.DocumentView.DocumentState == RapidDoc.Models.Repository.DocumentState.Execution || Model.DocumentView.DocumentState == RapidDoc.Models.Repository.DocumentState.OnSign) && Model.DocumentView.isSign)
            {
                if (Model.DocumentView.DocType == RapidDoc.Models.Repository.DocumentType.Request || (Model.DocumentView.DocumentState == RapidDoc.Models.Repository.DocumentState.Agreement && Model.DocumentView.DocType == RapidDoc.Models.Repository.DocumentType.OfficeMemo))
                { 
                    <button type="submit" class="btn btn-success btn-lg hidden-print" name="action:ApproveDocument" onclick="saveLastComment();">@UIElementRes.UIElement.Approve</button>
                    <button type="button" class="btn btn-danger hidden-print" data-toggle="modal" data-target=".bs-reject-modal-sm">@UIElementRes.UIElement.Reject</button>
                }
                else
                {
                    <button type="submit" class="btn btn-success btn-lg hidden-print" name="action:ApproveDocumentCZ" onclick="saveLastComment();">@UIElementRes.UIElement.Approve</button>
                }
            }

            @if ((Model.DocumentView.DocumentState == RapidDoc.Models.Repository.DocumentState.Agreement || Model.DocumentView.DocumentState == RapidDoc.Models.Repository.DocumentState.Execution) && Model.DocumentView.CreatedBy == User.Identity.Name)
            {
                <button type="button" class="btn btn-danger hidden-print" data-toggle="modal" data-target=".bs-withdraw-modal-sm">@UIElementRes.UIElement.Withdraw</button>
            }

            <div class="modal fade bs-reject-modal-sm" tabindex="-1" role="dialog" aria-labelledby="mySmallModalLabel" aria-hidden="true">
                <div class="modal-dialog modal-sm">
                    <div class="modal-content">
                        <div class="modal-header">
                            <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                            <h4 class="modal-title">@UIElementRes.UIElement.Confirmation</h4>
                        </div>
                        <div class="modal-body">
                            <p>@UIElementRes.UIElement.ConfirmationReject</p>
                            <p class="text-danger">@UIElementRes.UIElement.RejectReason</p>
                        </div>
                        <div class="modal-footer">
                            <button type="submit" class="btn btn-success" name="action:RejectDocument" onclick="saveLastComment();">@UIElementRes.UIElement.Yes</button>
                            <button type="button" class="btn btn-danger" data-dismiss="modal">@UIElementRes.UIElement.No</button>
                        </div>
                    </div>
                </div>
            </div>

            <div class="modal fade bs-withdraw-modal-sm" tabindex="-1" role="dialog" aria-labelledby="mySmallModalLabel" aria-hidden="true">
                <div class="modal-dialog modal-sm">
                    <div class="modal-content">
                        <div class="modal-header">
                            <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                            <h4 class="modal-title">@UIElementRes.UIElement.Confirmation</h4>
                        </div>
                        <div class="modal-body">
                            <p>@UIElementRes.UIElement.WithdrawQuestion</p>
                        </div>
                        <div class="modal-footer">
                            <button type="submit" class="btn btn-success" name="action:WithdrawDocument">@UIElementRes.UIElement.Yes</button>
                            <button type="button" class="btn btn-danger" data-dismiss="modal">@UIElementRes.UIElement.No</button>
                        </div>
                    </div>
                </div>
            </div>

            <div class="btn-group hidden-print">
                <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown">
                    @UIElementRes.UIElement.Create <span class="caret"></span>
                </button>
                <ul class="dropdown-menu" role="menu">
                    <li><a href=@Url.Action("AddReader", new { id = Model.DocumentView.Id })>@UIElementRes.UIElement.Reader</a></li>
                    @if (Model.DocumentView.isArchive == false)
                    {
                        <li><a href=@Url.Action("DocumentToArchive", new { id = Model.DocumentView.Id })>@UIElementRes.UIElement.ToArchive</a></li>
                    }
                    else
                    {
                        <li><a href=@Url.Action("DocumentFromArchive", new { id = Model.DocumentView.Id })>@UIElementRes.UIElement.FromArchive</a></li>
                    }
                    <li>
                        <a href=@Url.Action("CopyDocument", new { processId = Model.ProcessView.Id, fileId = Model.fileId, documentId = Model.DocumentView.Id })>@UIElementRes.UIElement.Copy</a>
                    </li>
                    @if (Model.DocumentView.DocType == RapidDoc.Models.Repository.DocumentType.OfficeMemo &&
                         Model.DocumentView.DocumentState == RapidDoc.Models.Repository.DocumentState.OnSign)
                    {
                        <li>
                            <a href="#" data-toggle="modal" data-target=".addusers-modal">@UIElementRes.UIElement.SendBookmark</a>
                        </li>   
                    }
                </ul>
            </div>
            <a href="javascript:window.print()" class="btn btn-default hidden-print">@UIElementRes.UIElement.Print</a>
            <a href=@Url.Action("Index", "Document") class="btn btn-default hidden-print" role="button">@UIElementRes.UIElement.Close</a>
        </fieldset>
    }

    <p>
        <h4 class="text-right hidden-print">@UIElementRes.UIElement.AddComment</h4>
        @using (Ajax.BeginForm("GetAllComment", new { documentId = Model.DocumentView.Id }, new AjaxOptions { UpdateTargetId = "comments", OnComplete = "clearTextAreaComment" }, new { name = "commentForm" }))
        {
            <div class="hidden-print">
                @Html.TextArea("lastComment", new { @class = "form-control", @rows = "3" })
                <div class="row">
                    <div class="col-md-7 visible-lg-inline"><kbd>Ctrl + Enter</kbd></div>
                    <div class="col-md-5"><input class="btn btn-primary btn-xs btn-block pull-right" id="saveCommentBtn" type="submit" value=@UIElementRes.UIElement.Save></div>
                </div>
            </div>
            <br class="hidden-print">
        }
    </p>

<!-- The template to display files available for upload -->
<script id="template-upload" type="text/x-tmpl">
    {% for (var i=0, file; file=o.files[i]; i++) { %}
    <tr class="template-upload fade">
        <td>
            <span class="preview"></span>
        </td>
        <td>
            <p class="name">{%=file.name%}</p>
            <strong class="error text-danger"></strong>
        </td>
        <td>
            <p class="size">Processing...</p>
            <div class="progress progress-striped active" role="progressbar" aria-valuemin="0" aria-valuemax="100" aria-valuenow="0"><div class="progress-bar progress-bar-success" style="width:0%;"></div></div>
        </td>
        <td>
            {% if (!i) { %}
            <button class="btn btn-warning btn-xs cancel">
                <i class="glyphicon glyphicon-ban-circle"></i>
                <span>@UIElementRes.UIElement.Cancel</span>
            </button>
            {% } %}
        </td>
    </tr>
    {% } %}
</script>
<!-- The template to display files available for download -->
<script id="template-download" type="text/x-tmpl">
    {% for (var i=0, file; file=o.files[i]; i++) { %}
    <tr class="template-download fade">
        <td class="fileuploadtdid hidden">
            {%=file.id%}
        </td>
        <td>
            <span class="preview">
                {% if (file.thumbnailUrl) { %}
                <a href="{%=file.url%}" title="{%=file.name%}" download="{%=file.name%}" data-gallery><img src="{%=file.thumbnailUrl%}"></a>
                {% } %}
            </span>
        </td>
        <td>
            <p class="name">
                {% if (file.url) { %}
                {% if (file.isReplaceFile) { %}
                <a href="{%=file.url%}" title="{%=file.name%}" download="{%=file.name%}" class="text-danger"><del>{%=file.name%}</del></a>
                {% } else { %}
                <a href="{%=file.url%}" title="{%=file.name%}" download="{%=file.name%}">{%=file.name%}</a>
                {% } %}
                {% } else { %}
                <span>{%=file.name%}</span>
                {% } %}
            </p>
            {% if (file.error) { %}
            <div><span class="label label-danger">Error</span> {%=file.error%}</div>
            {% } %}
        </td>
        <td>
            <span class="size">{%=o.formatFileSize(file.size)%}</span>
        </td>
        <td>
            {%=file.createdUser%}
        </td>
        <td>
            {%=file.createdDate%}
        </td>
        <td>
            {%=file.versionName%}
        </td>
        <td>
            {% if (file.isReplaceFile === false && file.isClosed === false) { %}
            <span class="btn btn-default btn-xs fileinput-button">
                <i class="glyphicon glyphicon-repeat"></i>
                <span>@UIElementRes.UIElement.Replace</span>
                <input class="fileuploadreplace" type="file" name="files2[]" onclick="replaceFile(this);">
            </span>
            {% } %}
        </td>
        <td>
            {% if (file.deleteUrl) { %}
            {% if (file.deleteType != "") { %}
            <button class="btn btn-danger btn-xs delete" data-type="{%=file.deleteType%}" data-url="{%=file.deleteUrl%}" {% if (file.deletewithcredentials) { %} data-xhr-fields='{"withCredentials":true}' {% } %}>
                <i class="glyphicon glyphicon-trash"></i>
                <span>@UIElementRes.UIElement.Delete</span>
            </button>
            {% } %}
            {% } else { %}
            <button class="btn btn-warning btn-xs cancel">
                <i class="glyphicon glyphicon-ban-circle"></i>
                <span>@UIElementRes.UIElement.Cancel</span>
            </button>
            {% } %}
        </td>
    </tr>
    {% } %}
</script>
      
<script type="text/javascript">
    function clearTextAreaComment(result) {
        $('#lastComment').val('');

        var button = $(this).find('input[type="submit"]');
        setTimeout(function () {
            button.removeAttr("disabled");
        }, 0);
    }

    function saveLastComment() {
        var lastComment = $('#lastComment').val();
        if (lastComment) {
            document.getElementById('saveCommentBtn').click();
        }
    }
</script>
    <br class="hidden-print">
    <br class="hidden-print">
    <div class="row">
        <div id="qrcode" class="pull-right"></div>
    </div>

    <!-- The template to display files available for upload -->
    <script id="template-upload" type="text/x-tmpl">
        {% for (var i=0, file; file=o.files[i]; i++) { %}
        <tr class="template-upload fade">
            <td>
                <span class="preview"></span>
            </td>
            <td>
                <p class="name">{%=file.name%}</p>
                <strong class="error text-danger"></strong>
            </td>
            <td>
                <p class="size">Processing...</p>
                <div class="progress progress-striped active" role="progressbar" aria-valuemin="0" aria-valuemax="100" aria-valuenow="0"><div class="progress-bar progress-bar-success" style="width:0%;"></div></div>
            </td>
            <td></td>
        </tr>
        {% } %}
    </script>
    <!-- The template to display files available for download -->
    <script id="template-download" type="text/x-tmpl">
        {% for (var i=0, file; file=o.files[i]; i++) { %}
        <tr class="template-download fade">
            <td>
                <span class="preview">
                    {% if (file.thumbnailUrl) { %}
                    <a href="{%=file.url%}" title="{%=file.name%}" download="{%=file.name%}" data-gallery><img src="{%=file.thumbnailUrl%}"></a>
                    {% } %}
                </span>
            </td>
            <td>
                <p class="name">
                    {% if (file.url) { %}
                    <a href="{%=file.url%}" title="{%=file.name%}" download="{%=file.name%}">{%=file.name%}</a>
                    {% } else { %}
                    <span>{%=file.name%}</span>
                    {% } %}
                </p>
                {% if (file.error) { %}
                <div><span class="label label-danger">Error</span> {%=file.error%}</div>
                {% } %}
            </td>
            <td>
                <span class="size">{%=o.formatFileSize(file.size)%}</span>
            </td>
            <td></td>
        </tr>
        {% } %}
    </script>

@section Scripts {
    @Scripts.Render("~/bundles/editentity")
    @Scripts.Render("~/bundles/fileupload")
    @Scripts.Render("~/bundles/pnotify")
}
@section jsinit {
    var urlFileDownload = "@Url.Action("GetAllFileDocument", "Document", new { id = Model.fileId })";
    var urlFileUpload = "@Url.Action("AjaxUpload", "Document", new { processId = Model.ProcessView.Id, fileId = Model.fileId })";
}
@section jslaunch {
<script type="text/javascript">
    $(function () {
        selectpicker_init();
        datepicker_init("@UIElementRes.UIElement.LangName");
        datetimepicker_init("@UIElementRes.UIElement.LangName");
        custom_tagsinputEmpl_init("@Url.Action("JsonEmpl", "Custom")");
        custom_tagsinputEmpl2_init("@Url.Action("JsonEmpl", "Custom")");
        custom_tagsinputEmpl3_init("@Url.Action("JsonEmpl", "Custom")");
        custom_tagsinputEmpl4_init("@Url.Action("JsonEmpl", "Custom")");
        custom_tagsinputGroup2_init("@Url.Action("JsonGroup", "Custom")")
        popover_init();
        qrcode_init();

        $('#lastComment').keydown(function (e) {
            var key = e.charCode ? e.charCode : e.keyCode ? e.keyCode : 0;
            if (event.ctrlKey && key == 13) {
                e.preventDefault();
                document.getElementById('saveCommentBtn').click();
            }
        });

        $('#documenturl').click(function (e) {
            var doc = document;
            var text = this;

            if (doc.body.createTextRange) { // ms
                var range = doc.body.createTextRange();
                range.moveToElementText(text);
                range.select();
            } else if (window.getSelection) { // moz, opera, webkit
                var selection = window.getSelection();
                var range = doc.createRange();
                range.selectNodeContents(text);
                selection.removeAllRanges();
                selection.addRange(range);
            }

            new PNotify({
                title: '@UIElementRes.UIElement.LinkToDocument',
                text: '@UIElementRes.UIElement.LinkToDocumentText',
                type: 'info',
                delay: 3000,
                animate_speed: 'fast',
                addclass: 'hidden-print'
            });

            return false;
        });
    });

    function replaceFile(e) {
        var replaceFileId = $(e).closest('tr').find('.fileuploadtdid').text().trim();
        $('.fileuploadreplace').fileupload({
            dataType: 'json',
            limitMultiFileUploads: 1,
            url: "@(Url.Action("AjaxUploadReplaceFile", "Document", new { processId = Model.ProcessView.Id, fileId = Model.fileId }))" + "&fileDocId=" + replaceFileId,
            autoUpload: true,
            done: function (e, data) {
                location.reload();
            }
        });
    }
</script>
}
