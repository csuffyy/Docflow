@model RapidDoc.Models.ViewModels.DocumentComposite
@using RapidDoc.Extensions;
@{
    ViewBag.Title = Model.DocumentView.DocumentNum + " - " + Model.ProcessView.ProcessName;
}

<div class="row">
    <div class="col-xs-6">
        <h5 class="hidden-print"><a href="@ViewBag.DocumentUrl" id="documenturl">#@Model.DocumentView.DocumentNum</a><strong> - @Model.ProcessView.ProcessName</strong></h5>
        <h5>
            <span class="visible-print-inline">@Model.DocumentView.DocumentNum - @Model.ProcessView.ProcessName</span>
            <small class="">@Model.DocumentView.DocumentState.GetDescription()</small>
        </h5>
    </div>
    <div class="col-xs-6">
        <h5 class="text-right"><small class="hidden-print">(@ViewBag.CompanyName)</small> @ViewBag.Initiator <small>@ViewBag.TitleName, @ViewBag.DepartmentName, @ViewBag.CreatedDate</small></h5>
    </div>
</div>

@using (Html.BeginForm("", "", new { processId = Model.ProcessView.Id, type = 3, fileId = Model.fileId, documentId = Model.DocumentView.Id, actionModelName = Model.ProcessView.TableName }, FormMethod.Post, new { id = "ajaxUploadForm", enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(false)

    <fieldset>
        <legend></legend>
        @Html.HiddenFor(model => model.ProcessView.Id)
        @Html.HiddenFor(model => model.DocumentView.Id)
        @Html.HiddenFor(model => model.fileId)
        @Html.Action("GetDocumentData", new { modelDoc = Model.docData, Model.ProcessView.TableName, viewType = "Edit" })
        @if (Model.ProcessTemplates.Count() > 0)
        { 
            <br>
            <h4>@UIElementRes.UIElement.Templates</h4>
            <div>
                @foreach (var item in Model.ProcessTemplates)
                {
                    <a href=@Url.Action(@"DownloadFile/" + item.Id.ToString(), "Document") class=""><span class="fa fa-paperclip fa-5x"></span> @item.FileName</a>
                }
            </div>   
        }      
        <br>
        <h4>@UIElementRes.UIElement.AttachedFiles
            <span class="btn btn-primary btn-xs fileinput-button">
                <i class="glyphicon glyphicon-plus"></i>
                <span>@UIElementRes.UIElement.AddFiles</span>
                <input type="file" name="files" multiple>
            </span>
        </h4>
        @if(!String.IsNullOrEmpty(Model.ProcessView.MandatoryFileTypes))
        {
            <h5 class="text-danger">@UIElementRes.UIElement.SupportFileTypes: @Model.ProcessView.MandatoryFileTypes</h5>
        }
        @if (Model.ProcessView.MandatoryNumberFiles > 0)
        {
            <h5 class="text-danger">@String.Format(UIElementRes.UIElement.MustAttachedFiles, Model.ProcessView.MandatoryNumberFiles)</h5>
        }
        <table role="presentation" class="table table-striped"><tbody class="files"></tbody></table>

        <br class="hidden-print">
        <div class="hidden-print">
            @if (((List<RapidDoc.Models.ViewModels.HistoryUserView>)ViewBag.RejectHistory).Count() > 0)
            {
                <ul>
                    @foreach (var history in (List<RapidDoc.Models.ViewModels.HistoryUserView>)ViewBag.RejectHistory)
                    {
                        <li>@UIElementRes.UIElement.DocumentReject <abbr title="@history.CreatedEmplName" class="initialism popover-link" data-container="body" data-toggle="popover" data-placement="left" data-content="@history.CreatedEmplDepartment - @history.CreatedEmplTitle">@history.CreatedBy</abbr> @Html.DateTimeLocal(history.CreatedDate)</li>
                    }
                </ul>
            }
            <div class="row">
                <div class="col-md-6">
                    @if (((List<RapidDoc.Models.ViewModels.HistoryUserView>)ViewBag.AddReaders).Count() > 0)
                    {
                        <ul>
                            @foreach (var history in (List<RapidDoc.Models.ViewModels.HistoryUserView>)ViewBag.AddReaders)
                            {
                                <li>@UIElementRes.UIElement.DocumentAddReaders @history.Description @Html.DateTimeLocal(history.CreatedDate), <abbr title="@history.CreatedEmplName" class="initialism popover-link" data-container="body" data-toggle="popover" data-placement="left" data-content="@history.CreatedEmplDepartment - @history.CreatedEmplTitle">@history.CreatedBy</abbr></li>
                            }
                        </ul>
                    }
                </div>
                <div class="col-md-6">
                    @if (((List<RapidDoc.Models.ViewModels.HistoryUserView>)ViewBag.RemoveReaders).Count() > 0)
                    {
                        <ul>
                            @foreach (var history in (List<RapidDoc.Models.ViewModels.HistoryUserView>)ViewBag.RemoveReaders)
                            {
                                <li>@UIElementRes.UIElement.DocumentRemoveReaders @history.Description @Html.DateTimeLocal(history.CreatedDate), <abbr title="@history.CreatedEmplName" class="initialism popover-link" data-container="body" data-toggle="popover" data-placement="left" data-content="@history.CreatedEmplDepartment - @history.CreatedEmplTitle">@history.CreatedBy</abbr></li>
                            }
                        </ul>
                    }
                </div>
            </div>
        </div>

        @Html.Action("GetAllComment", "Document", new { documentId = Model.DocumentView.Id })
        <p>
            <button type="submit" class="btn btn-success btn-lg" name="action:ApproveDocument">@UIElementRes.UIElement.Approve</button>
            <button type="submit" class="btn btn-default btn-sm" name="action:SaveDraft">@UIElementRes.UIElement.SaveDraft</button>
            @if(Model.DocumentView.CreatedBy == User.Identity.Name || User.IsInRole("Administrator"))
            {
                <button type="button" class="btn btn-danger btn-sm bg-danger hidden-print" data-toggle="modal" data-target=".bs-delete-modal-sm">@UIElementRes.UIElement.Delete</button>
            }
            <a href="@Url.Action("Index", "Document")" class="btn btn-default btn-sm" role="button">@UIElementRes.UIElement.Cancel</a>
        </p>

        <div class="modal fade bs-delete-modal-sm" tabindex="-1" role="dialog" aria-labelledby="mySmallModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-sm">
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                        <h4 class="modal-title">@UIElementRes.UIElement.Confirmation</h4>
                    </div>
                    <div class="modal-body">
                        <p>@UIElementRes.UIElement.СonfirmDeletion</p>
                    </div>
                    <div class="modal-footer">
                        <button type="submit" class="btn btn-success" name="action:DeleteDraft">@UIElementRes.UIElement.Yes</button>
                        <button type="button" class="btn btn-danger" data-dismiss="modal">@UIElementRes.UIElement.No</button>
                    </div>
                </div>
            </div>
        </div>

</fieldset>
}

<!-- The template to display files available for upload -->
<script id="template-upload" type="text/x-tmpl">
    {% for (var i=0, file; file=o.files[i]; i++) { %}
    <tr class="template-upload fade">
        <td>
            <span class="preview"></span>
        </td>
        <td>
            <p class="name">{%=file.name%}</p>
            <strong class="error text-danger"></strong>
        </td>
        <td>
            <p class="size">Processing...</p>
            <div class="progress progress-striped active" role="progressbar" aria-valuemin="0" aria-valuemax="100" aria-valuenow="0"><div class="progress-bar progress-bar-success" style="width:0%;"></div></div>
        </td>
        <td>
            {% if (!i) { %}
            <button class="btn btn-warning btn-xs cancel">
                <i class="glyphicon glyphicon-ban-circle"></i>
                <span>@UIElementRes.UIElement.Cancel</span>
            </button>
            {% } %}
        </td>
    </tr>
    {% } %}
</script>
<!-- The template to display files available for download -->
<script id="template-download" type="text/x-tmpl">
    {% for (var i=0, file; file=o.files[i]; i++) { %}
    <tr class="template-download fade">
        <td class="fileuploadtdid hidden">
            {%=file.id%}
        </td>
        <td>
            <span class="preview">
                {% if (file.thumbnailUrl) { %}
                <a href="{%=file.url%}" title="{%=file.name%}" download="{%=file.name%}" data-gallery><img src="{%=file.thumbnailUrl%}"></a>
                {% } %}
            </span>
        </td>
        <td>
            <p class="name">
                {% if (file.url) { %}
                {% if (file.isReplaceFile) { %}
                <a href="{%=file.url%}" title="{%=file.name%}" download="{%=file.name%}" class="text-danger"><del>{%=file.name%}</del></a>
                {% } else { %}
                <a href="{%=file.url%}" title="{%=file.name%}" download="{%=file.name%}">{%=file.name%}</a>
                {% } %}
                {% } else { %}
                <span>{%=file.name%}</span>
                {% } %}
            </p>
            {% if (file.error) { %}
            <div><span class="label label-danger">Error</span> {%=file.error%}</div>
            {% } %}
        </td>
        <td>
            <span class="size">{%=o.formatFileSize(file.size)%}</span>
        </td>
        <td>
            {%=file.createdUser%}
        </td>
        <td>
            {%=file.createdDate%}
        </td>
        <td>
            {%=file.versionName%}
        </td>
        <td>

        </td>
        <td>
            {% if (file.deleteUrl) { %}
            <button class="btn btn-danger btn-xs delete" data-type="{%=file.deleteType%}" data-url="{%=file.deleteUrl%}" {% if (file.deletewithcredentials) { %} data-xhr-fields='{"withCredentials":true}' {% } %}>
                <i class="glyphicon glyphicon-trash"></i>
                <span>@UIElementRes.UIElement.Delete</span>
            </button>
            {% } else { %}
            <button class="btn btn-warning btn-xs cancel">
                <i class="glyphicon glyphicon-ban-circle"></i>
                <span>@UIElementRes.UIElement.Cancel</span>
            </button>
            {% } %}
        </td>
    </tr>
    {% } %}
</script>

@section Scripts {
    @Scripts.Render("~/bundles/editentity")
    @Scripts.Render("~/bundles/fileupload")
    @Scripts.Render("~/bundles/pnotify")
}
@section jsinit {
    var urlFileDownload = "@Url.Action("GetAllFileDocument", "Document", new { id = Model.fileId })";
    var urlFileUpload = "@Url.Action("AjaxUpload", "Document", new { processId = Model.ProcessView.Id, fileId = Model.fileId })";
}
@section jslaunch {
<script type="text/javascript">
    $(function () {
        selectpicker_init();
        selectpickerfull_init();
        selectpickermanual_init();
        datepicker_init("@UIElementRes.UIElement.LangName");
        datetimepicker_init("@UIElementRes.UIElement.LangName");
        summernote_init("@UIElementRes.UIElement.LangFullName");
        timepicker_init();
        custom_tagsinputEmpl_init("@Url.Action("JsonEmpl", "Custom")");
        custom_tagsinputEmpl2_init("@Url.Action("JsonEmpl", "Custom")");
        custom_tagsinputEmpl3_init("@Url.Action("JsonEmpl", "Custom")");
        custom_tagsinputEmpl4_init("@Url.Action("JsonEmpl", "Custom")");
        custom_tagsinputEmpl5_init("@Url.Action("JsonEmpl", "Custom")");
        custom_tagsinputGroup_init("@Url.Action("JsonGroup", "Custom")");
        custom_tagsinputGroup2_init("@Url.Action("JsonGroup", "Custom")");
        custom_tagsinputEmplIntercompany_init("@Url.Action("JsonEmplIntercompany", "Custom")");
        popover_init();

        $('#documenturl').click(function (e) {
            var doc = document;
            var text = this;

            if (doc.body.createTextRange) { // ms
                var range = doc.body.createTextRange();
                range.moveToElementText(text);
                range.select();
            } else if (window.getSelection) { // moz, opera, webkit
                var selection = window.getSelection();
                var range = doc.createRange();
                range.selectNodeContents(text);
                selection.removeAllRanges();
                selection.addRange(range);
            }

            new PNotify({
                title: '@UIElementRes.UIElement.LinkToDocument',
                text: '@UIElementRes.UIElement.LinkToDocumentText',
                type: 'info',
                delay: 3000,
                animate_speed: 'fast',
                addclass: 'hidden-print'
            });

            return false;
        });
    });
</script>
}